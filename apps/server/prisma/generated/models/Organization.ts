
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Organization` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Organization
 * 
 */
export type OrganizationModel = runtime.Types.Result.DefaultSelection<Prisma.$OrganizationPayload>

export type AggregateOrganization = {
  _count: OrganizationCountAggregateOutputType | null
  _min: OrganizationMinAggregateOutputType | null
  _max: OrganizationMaxAggregateOutputType | null
}

export type OrganizationMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  companySize: string | null
  businessWebsite: string | null
  logo: string | null
  slug: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type OrganizationMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  companySize: string | null
  businessWebsite: string | null
  logo: string | null
  slug: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type OrganizationCountAggregateOutputType = {
  id: number
  name: number
  description: number
  companySize: number
  businessWebsite: number
  logo: number
  slug: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type OrganizationMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  companySize?: true
  businessWebsite?: true
  logo?: true
  slug?: true
  createdAt?: true
  updatedAt?: true
}

export type OrganizationMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  companySize?: true
  businessWebsite?: true
  logo?: true
  slug?: true
  createdAt?: true
  updatedAt?: true
}

export type OrganizationCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  companySize?: true
  businessWebsite?: true
  logo?: true
  slug?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type OrganizationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Organization to aggregate.
   */
  where?: Prisma.OrganizationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Organizations to fetch.
   */
  orderBy?: Prisma.OrganizationOrderByWithRelationInput | Prisma.OrganizationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OrganizationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Organizations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Organizations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Organizations
  **/
  _count?: true | OrganizationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrganizationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrganizationMaxAggregateInputType
}

export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
      [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrganization[P]>
    : Prisma.GetScalarType<T[P], AggregateOrganization[P]>
}




export type OrganizationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrganizationWhereInput
  orderBy?: Prisma.OrganizationOrderByWithAggregationInput | Prisma.OrganizationOrderByWithAggregationInput[]
  by: Prisma.OrganizationScalarFieldEnum[] | Prisma.OrganizationScalarFieldEnum
  having?: Prisma.OrganizationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrganizationCountAggregateInputType | true
  _min?: OrganizationMinAggregateInputType
  _max?: OrganizationMaxAggregateInputType
}

export type OrganizationGroupByOutputType = {
  id: string
  name: string
  description: string | null
  companySize: string | null
  businessWebsite: string | null
  logo: string | null
  slug: string
  createdAt: Date
  updatedAt: Date
  _count: OrganizationCountAggregateOutputType | null
  _min: OrganizationMinAggregateOutputType | null
  _max: OrganizationMaxAggregateOutputType | null
}

type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrganizationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrganizationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrganizationGroupByOutputType[P]>
      }
    >
  >



export type OrganizationWhereInput = {
  AND?: Prisma.OrganizationWhereInput | Prisma.OrganizationWhereInput[]
  OR?: Prisma.OrganizationWhereInput[]
  NOT?: Prisma.OrganizationWhereInput | Prisma.OrganizationWhereInput[]
  id?: Prisma.StringFilter<"Organization"> | string
  name?: Prisma.StringFilter<"Organization"> | string
  description?: Prisma.StringNullableFilter<"Organization"> | string | null
  companySize?: Prisma.StringNullableFilter<"Organization"> | string | null
  businessWebsite?: Prisma.StringNullableFilter<"Organization"> | string | null
  logo?: Prisma.StringNullableFilter<"Organization"> | string | null
  slug?: Prisma.StringFilter<"Organization"> | string
  createdAt?: Prisma.DateTimeFilter<"Organization"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Organization"> | Date | string
  management?: Prisma.ManagementMembershipListRelationFilter
  subscription?: Prisma.XOR<Prisma.SubscriptionNullableScalarRelationFilter, Prisma.SubscriptionWhereInput> | null
  locations?: Prisma.LocationListRelationFilter
  activityLogs?: Prisma.ActivityLogListRelationFilter
}

export type OrganizationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  companySize?: Prisma.SortOrderInput | Prisma.SortOrder
  businessWebsite?: Prisma.SortOrderInput | Prisma.SortOrder
  logo?: Prisma.SortOrderInput | Prisma.SortOrder
  slug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  management?: Prisma.ManagementMembershipOrderByRelationAggregateInput
  subscription?: Prisma.SubscriptionOrderByWithRelationInput
  locations?: Prisma.LocationOrderByRelationAggregateInput
  activityLogs?: Prisma.ActivityLogOrderByRelationAggregateInput
}

export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  slug?: string
  AND?: Prisma.OrganizationWhereInput | Prisma.OrganizationWhereInput[]
  OR?: Prisma.OrganizationWhereInput[]
  NOT?: Prisma.OrganizationWhereInput | Prisma.OrganizationWhereInput[]
  name?: Prisma.StringFilter<"Organization"> | string
  description?: Prisma.StringNullableFilter<"Organization"> | string | null
  companySize?: Prisma.StringNullableFilter<"Organization"> | string | null
  businessWebsite?: Prisma.StringNullableFilter<"Organization"> | string | null
  logo?: Prisma.StringNullableFilter<"Organization"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Organization"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Organization"> | Date | string
  management?: Prisma.ManagementMembershipListRelationFilter
  subscription?: Prisma.XOR<Prisma.SubscriptionNullableScalarRelationFilter, Prisma.SubscriptionWhereInput> | null
  locations?: Prisma.LocationListRelationFilter
  activityLogs?: Prisma.ActivityLogListRelationFilter
}, "id" | "slug">

export type OrganizationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  companySize?: Prisma.SortOrderInput | Prisma.SortOrder
  businessWebsite?: Prisma.SortOrderInput | Prisma.SortOrder
  logo?: Prisma.SortOrderInput | Prisma.SortOrder
  slug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.OrganizationCountOrderByAggregateInput
  _max?: Prisma.OrganizationMaxOrderByAggregateInput
  _min?: Prisma.OrganizationMinOrderByAggregateInput
}

export type OrganizationScalarWhereWithAggregatesInput = {
  AND?: Prisma.OrganizationScalarWhereWithAggregatesInput | Prisma.OrganizationScalarWhereWithAggregatesInput[]
  OR?: Prisma.OrganizationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OrganizationScalarWhereWithAggregatesInput | Prisma.OrganizationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Organization"> | string
  name?: Prisma.StringWithAggregatesFilter<"Organization"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Organization"> | string | null
  companySize?: Prisma.StringNullableWithAggregatesFilter<"Organization"> | string | null
  businessWebsite?: Prisma.StringNullableWithAggregatesFilter<"Organization"> | string | null
  logo?: Prisma.StringNullableWithAggregatesFilter<"Organization"> | string | null
  slug?: Prisma.StringWithAggregatesFilter<"Organization"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Organization"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Organization"> | Date | string
}

export type OrganizationCreateInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  management?: Prisma.ManagementMembershipCreateNestedManyWithoutOrganizationInput
  subscription?: Prisma.SubscriptionCreateNestedOneWithoutOrganizationInput
  locations?: Prisma.LocationCreateNestedManyWithoutOrganizationInput
  activityLogs?: Prisma.ActivityLogCreateNestedManyWithoutOrganizationInput
}

export type OrganizationUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  management?: Prisma.ManagementMembershipUncheckedCreateNestedManyWithoutOrganizationInput
  subscription?: Prisma.SubscriptionUncheckedCreateNestedOneWithoutOrganizationInput
  locations?: Prisma.LocationUncheckedCreateNestedManyWithoutOrganizationInput
  activityLogs?: Prisma.ActivityLogUncheckedCreateNestedManyWithoutOrganizationInput
}

export type OrganizationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  management?: Prisma.ManagementMembershipUpdateManyWithoutOrganizationNestedInput
  subscription?: Prisma.SubscriptionUpdateOneWithoutOrganizationNestedInput
  locations?: Prisma.LocationUpdateManyWithoutOrganizationNestedInput
  activityLogs?: Prisma.ActivityLogUpdateManyWithoutOrganizationNestedInput
}

export type OrganizationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  management?: Prisma.ManagementMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
  subscription?: Prisma.SubscriptionUncheckedUpdateOneWithoutOrganizationNestedInput
  locations?: Prisma.LocationUncheckedUpdateManyWithoutOrganizationNestedInput
  activityLogs?: Prisma.ActivityLogUncheckedUpdateManyWithoutOrganizationNestedInput
}

export type OrganizationCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OrganizationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrganizationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrganizationScalarRelationFilter = {
  is?: Prisma.OrganizationWhereInput
  isNot?: Prisma.OrganizationWhereInput
}

export type OrganizationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  companySize?: Prisma.SortOrder
  businessWebsite?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OrganizationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  companySize?: Prisma.SortOrder
  businessWebsite?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OrganizationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  companySize?: Prisma.SortOrder
  businessWebsite?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OrganizationCreateNestedOneWithoutSubscriptionInput = {
  create?: Prisma.XOR<Prisma.OrganizationCreateWithoutSubscriptionInput, Prisma.OrganizationUncheckedCreateWithoutSubscriptionInput>
  connectOrCreate?: Prisma.OrganizationCreateOrConnectWithoutSubscriptionInput
  connect?: Prisma.OrganizationWhereUniqueInput
}

export type OrganizationUpdateOneRequiredWithoutSubscriptionNestedInput = {
  create?: Prisma.XOR<Prisma.OrganizationCreateWithoutSubscriptionInput, Prisma.OrganizationUncheckedCreateWithoutSubscriptionInput>
  connectOrCreate?: Prisma.OrganizationCreateOrConnectWithoutSubscriptionInput
  upsert?: Prisma.OrganizationUpsertWithoutSubscriptionInput
  connect?: Prisma.OrganizationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OrganizationUpdateToOneWithWhereWithoutSubscriptionInput, Prisma.OrganizationUpdateWithoutSubscriptionInput>, Prisma.OrganizationUncheckedUpdateWithoutSubscriptionInput>
}

export type OrganizationCreateNestedOneWithoutManagementInput = {
  create?: Prisma.XOR<Prisma.OrganizationCreateWithoutManagementInput, Prisma.OrganizationUncheckedCreateWithoutManagementInput>
  connectOrCreate?: Prisma.OrganizationCreateOrConnectWithoutManagementInput
  connect?: Prisma.OrganizationWhereUniqueInput
}

export type OrganizationUpdateOneRequiredWithoutManagementNestedInput = {
  create?: Prisma.XOR<Prisma.OrganizationCreateWithoutManagementInput, Prisma.OrganizationUncheckedCreateWithoutManagementInput>
  connectOrCreate?: Prisma.OrganizationCreateOrConnectWithoutManagementInput
  upsert?: Prisma.OrganizationUpsertWithoutManagementInput
  connect?: Prisma.OrganizationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OrganizationUpdateToOneWithWhereWithoutManagementInput, Prisma.OrganizationUpdateWithoutManagementInput>, Prisma.OrganizationUncheckedUpdateWithoutManagementInput>
}

export type OrganizationCreateNestedOneWithoutLocationsInput = {
  create?: Prisma.XOR<Prisma.OrganizationCreateWithoutLocationsInput, Prisma.OrganizationUncheckedCreateWithoutLocationsInput>
  connectOrCreate?: Prisma.OrganizationCreateOrConnectWithoutLocationsInput
  connect?: Prisma.OrganizationWhereUniqueInput
}

export type OrganizationUpdateOneRequiredWithoutLocationsNestedInput = {
  create?: Prisma.XOR<Prisma.OrganizationCreateWithoutLocationsInput, Prisma.OrganizationUncheckedCreateWithoutLocationsInput>
  connectOrCreate?: Prisma.OrganizationCreateOrConnectWithoutLocationsInput
  upsert?: Prisma.OrganizationUpsertWithoutLocationsInput
  connect?: Prisma.OrganizationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OrganizationUpdateToOneWithWhereWithoutLocationsInput, Prisma.OrganizationUpdateWithoutLocationsInput>, Prisma.OrganizationUncheckedUpdateWithoutLocationsInput>
}

export type OrganizationCreateNestedOneWithoutActivityLogsInput = {
  create?: Prisma.XOR<Prisma.OrganizationCreateWithoutActivityLogsInput, Prisma.OrganizationUncheckedCreateWithoutActivityLogsInput>
  connectOrCreate?: Prisma.OrganizationCreateOrConnectWithoutActivityLogsInput
  connect?: Prisma.OrganizationWhereUniqueInput
}

export type OrganizationUpdateOneRequiredWithoutActivityLogsNestedInput = {
  create?: Prisma.XOR<Prisma.OrganizationCreateWithoutActivityLogsInput, Prisma.OrganizationUncheckedCreateWithoutActivityLogsInput>
  connectOrCreate?: Prisma.OrganizationCreateOrConnectWithoutActivityLogsInput
  upsert?: Prisma.OrganizationUpsertWithoutActivityLogsInput
  connect?: Prisma.OrganizationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OrganizationUpdateToOneWithWhereWithoutActivityLogsInput, Prisma.OrganizationUpdateWithoutActivityLogsInput>, Prisma.OrganizationUncheckedUpdateWithoutActivityLogsInput>
}

export type OrganizationCreateWithoutSubscriptionInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  management?: Prisma.ManagementMembershipCreateNestedManyWithoutOrganizationInput
  locations?: Prisma.LocationCreateNestedManyWithoutOrganizationInput
  activityLogs?: Prisma.ActivityLogCreateNestedManyWithoutOrganizationInput
}

export type OrganizationUncheckedCreateWithoutSubscriptionInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  management?: Prisma.ManagementMembershipUncheckedCreateNestedManyWithoutOrganizationInput
  locations?: Prisma.LocationUncheckedCreateNestedManyWithoutOrganizationInput
  activityLogs?: Prisma.ActivityLogUncheckedCreateNestedManyWithoutOrganizationInput
}

export type OrganizationCreateOrConnectWithoutSubscriptionInput = {
  where: Prisma.OrganizationWhereUniqueInput
  create: Prisma.XOR<Prisma.OrganizationCreateWithoutSubscriptionInput, Prisma.OrganizationUncheckedCreateWithoutSubscriptionInput>
}

export type OrganizationUpsertWithoutSubscriptionInput = {
  update: Prisma.XOR<Prisma.OrganizationUpdateWithoutSubscriptionInput, Prisma.OrganizationUncheckedUpdateWithoutSubscriptionInput>
  create: Prisma.XOR<Prisma.OrganizationCreateWithoutSubscriptionInput, Prisma.OrganizationUncheckedCreateWithoutSubscriptionInput>
  where?: Prisma.OrganizationWhereInput
}

export type OrganizationUpdateToOneWithWhereWithoutSubscriptionInput = {
  where?: Prisma.OrganizationWhereInput
  data: Prisma.XOR<Prisma.OrganizationUpdateWithoutSubscriptionInput, Prisma.OrganizationUncheckedUpdateWithoutSubscriptionInput>
}

export type OrganizationUpdateWithoutSubscriptionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  management?: Prisma.ManagementMembershipUpdateManyWithoutOrganizationNestedInput
  locations?: Prisma.LocationUpdateManyWithoutOrganizationNestedInput
  activityLogs?: Prisma.ActivityLogUpdateManyWithoutOrganizationNestedInput
}

export type OrganizationUncheckedUpdateWithoutSubscriptionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  management?: Prisma.ManagementMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
  locations?: Prisma.LocationUncheckedUpdateManyWithoutOrganizationNestedInput
  activityLogs?: Prisma.ActivityLogUncheckedUpdateManyWithoutOrganizationNestedInput
}

export type OrganizationCreateWithoutManagementInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  subscription?: Prisma.SubscriptionCreateNestedOneWithoutOrganizationInput
  locations?: Prisma.LocationCreateNestedManyWithoutOrganizationInput
  activityLogs?: Prisma.ActivityLogCreateNestedManyWithoutOrganizationInput
}

export type OrganizationUncheckedCreateWithoutManagementInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  subscription?: Prisma.SubscriptionUncheckedCreateNestedOneWithoutOrganizationInput
  locations?: Prisma.LocationUncheckedCreateNestedManyWithoutOrganizationInput
  activityLogs?: Prisma.ActivityLogUncheckedCreateNestedManyWithoutOrganizationInput
}

export type OrganizationCreateOrConnectWithoutManagementInput = {
  where: Prisma.OrganizationWhereUniqueInput
  create: Prisma.XOR<Prisma.OrganizationCreateWithoutManagementInput, Prisma.OrganizationUncheckedCreateWithoutManagementInput>
}

export type OrganizationUpsertWithoutManagementInput = {
  update: Prisma.XOR<Prisma.OrganizationUpdateWithoutManagementInput, Prisma.OrganizationUncheckedUpdateWithoutManagementInput>
  create: Prisma.XOR<Prisma.OrganizationCreateWithoutManagementInput, Prisma.OrganizationUncheckedCreateWithoutManagementInput>
  where?: Prisma.OrganizationWhereInput
}

export type OrganizationUpdateToOneWithWhereWithoutManagementInput = {
  where?: Prisma.OrganizationWhereInput
  data: Prisma.XOR<Prisma.OrganizationUpdateWithoutManagementInput, Prisma.OrganizationUncheckedUpdateWithoutManagementInput>
}

export type OrganizationUpdateWithoutManagementInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  subscription?: Prisma.SubscriptionUpdateOneWithoutOrganizationNestedInput
  locations?: Prisma.LocationUpdateManyWithoutOrganizationNestedInput
  activityLogs?: Prisma.ActivityLogUpdateManyWithoutOrganizationNestedInput
}

export type OrganizationUncheckedUpdateWithoutManagementInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  subscription?: Prisma.SubscriptionUncheckedUpdateOneWithoutOrganizationNestedInput
  locations?: Prisma.LocationUncheckedUpdateManyWithoutOrganizationNestedInput
  activityLogs?: Prisma.ActivityLogUncheckedUpdateManyWithoutOrganizationNestedInput
}

export type OrganizationCreateWithoutLocationsInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  management?: Prisma.ManagementMembershipCreateNestedManyWithoutOrganizationInput
  subscription?: Prisma.SubscriptionCreateNestedOneWithoutOrganizationInput
  activityLogs?: Prisma.ActivityLogCreateNestedManyWithoutOrganizationInput
}

export type OrganizationUncheckedCreateWithoutLocationsInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  management?: Prisma.ManagementMembershipUncheckedCreateNestedManyWithoutOrganizationInput
  subscription?: Prisma.SubscriptionUncheckedCreateNestedOneWithoutOrganizationInput
  activityLogs?: Prisma.ActivityLogUncheckedCreateNestedManyWithoutOrganizationInput
}

export type OrganizationCreateOrConnectWithoutLocationsInput = {
  where: Prisma.OrganizationWhereUniqueInput
  create: Prisma.XOR<Prisma.OrganizationCreateWithoutLocationsInput, Prisma.OrganizationUncheckedCreateWithoutLocationsInput>
}

export type OrganizationUpsertWithoutLocationsInput = {
  update: Prisma.XOR<Prisma.OrganizationUpdateWithoutLocationsInput, Prisma.OrganizationUncheckedUpdateWithoutLocationsInput>
  create: Prisma.XOR<Prisma.OrganizationCreateWithoutLocationsInput, Prisma.OrganizationUncheckedCreateWithoutLocationsInput>
  where?: Prisma.OrganizationWhereInput
}

export type OrganizationUpdateToOneWithWhereWithoutLocationsInput = {
  where?: Prisma.OrganizationWhereInput
  data: Prisma.XOR<Prisma.OrganizationUpdateWithoutLocationsInput, Prisma.OrganizationUncheckedUpdateWithoutLocationsInput>
}

export type OrganizationUpdateWithoutLocationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  management?: Prisma.ManagementMembershipUpdateManyWithoutOrganizationNestedInput
  subscription?: Prisma.SubscriptionUpdateOneWithoutOrganizationNestedInput
  activityLogs?: Prisma.ActivityLogUpdateManyWithoutOrganizationNestedInput
}

export type OrganizationUncheckedUpdateWithoutLocationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  management?: Prisma.ManagementMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
  subscription?: Prisma.SubscriptionUncheckedUpdateOneWithoutOrganizationNestedInput
  activityLogs?: Prisma.ActivityLogUncheckedUpdateManyWithoutOrganizationNestedInput
}

export type OrganizationCreateWithoutActivityLogsInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  management?: Prisma.ManagementMembershipCreateNestedManyWithoutOrganizationInput
  subscription?: Prisma.SubscriptionCreateNestedOneWithoutOrganizationInput
  locations?: Prisma.LocationCreateNestedManyWithoutOrganizationInput
}

export type OrganizationUncheckedCreateWithoutActivityLogsInput = {
  id?: string
  name: string
  description?: string | null
  companySize?: string | null
  businessWebsite?: string | null
  logo?: string | null
  slug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  management?: Prisma.ManagementMembershipUncheckedCreateNestedManyWithoutOrganizationInput
  subscription?: Prisma.SubscriptionUncheckedCreateNestedOneWithoutOrganizationInput
  locations?: Prisma.LocationUncheckedCreateNestedManyWithoutOrganizationInput
}

export type OrganizationCreateOrConnectWithoutActivityLogsInput = {
  where: Prisma.OrganizationWhereUniqueInput
  create: Prisma.XOR<Prisma.OrganizationCreateWithoutActivityLogsInput, Prisma.OrganizationUncheckedCreateWithoutActivityLogsInput>
}

export type OrganizationUpsertWithoutActivityLogsInput = {
  update: Prisma.XOR<Prisma.OrganizationUpdateWithoutActivityLogsInput, Prisma.OrganizationUncheckedUpdateWithoutActivityLogsInput>
  create: Prisma.XOR<Prisma.OrganizationCreateWithoutActivityLogsInput, Prisma.OrganizationUncheckedCreateWithoutActivityLogsInput>
  where?: Prisma.OrganizationWhereInput
}

export type OrganizationUpdateToOneWithWhereWithoutActivityLogsInput = {
  where?: Prisma.OrganizationWhereInput
  data: Prisma.XOR<Prisma.OrganizationUpdateWithoutActivityLogsInput, Prisma.OrganizationUncheckedUpdateWithoutActivityLogsInput>
}

export type OrganizationUpdateWithoutActivityLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  management?: Prisma.ManagementMembershipUpdateManyWithoutOrganizationNestedInput
  subscription?: Prisma.SubscriptionUpdateOneWithoutOrganizationNestedInput
  locations?: Prisma.LocationUpdateManyWithoutOrganizationNestedInput
}

export type OrganizationUncheckedUpdateWithoutActivityLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companySize?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessWebsite?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  management?: Prisma.ManagementMembershipUncheckedUpdateManyWithoutOrganizationNestedInput
  subscription?: Prisma.SubscriptionUncheckedUpdateOneWithoutOrganizationNestedInput
  locations?: Prisma.LocationUncheckedUpdateManyWithoutOrganizationNestedInput
}


/**
 * Count Type OrganizationCountOutputType
 */

export type OrganizationCountOutputType = {
  management: number
  locations: number
  activityLogs: number
}

export type OrganizationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  management?: boolean | OrganizationCountOutputTypeCountManagementArgs
  locations?: boolean | OrganizationCountOutputTypeCountLocationsArgs
  activityLogs?: boolean | OrganizationCountOutputTypeCountActivityLogsArgs
}

/**
 * OrganizationCountOutputType without action
 */
export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationCountOutputType
   */
  select?: Prisma.OrganizationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * OrganizationCountOutputType without action
 */
export type OrganizationCountOutputTypeCountManagementArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ManagementMembershipWhereInput
}

/**
 * OrganizationCountOutputType without action
 */
export type OrganizationCountOutputTypeCountLocationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LocationWhereInput
}

/**
 * OrganizationCountOutputType without action
 */
export type OrganizationCountOutputTypeCountActivityLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ActivityLogWhereInput
}


export type OrganizationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  companySize?: boolean
  businessWebsite?: boolean
  logo?: boolean
  slug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  management?: boolean | Prisma.Organization$managementArgs<ExtArgs>
  subscription?: boolean | Prisma.Organization$subscriptionArgs<ExtArgs>
  locations?: boolean | Prisma.Organization$locationsArgs<ExtArgs>
  activityLogs?: boolean | Prisma.Organization$activityLogsArgs<ExtArgs>
  _count?: boolean | Prisma.OrganizationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["organization"]>

export type OrganizationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  companySize?: boolean
  businessWebsite?: boolean
  logo?: boolean
  slug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["organization"]>

export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  companySize?: boolean
  businessWebsite?: boolean
  logo?: boolean
  slug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["organization"]>

export type OrganizationSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  companySize?: boolean
  businessWebsite?: boolean
  logo?: boolean
  slug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type OrganizationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "companySize" | "businessWebsite" | "logo" | "slug" | "createdAt" | "updatedAt", ExtArgs["result"]["organization"]>
export type OrganizationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  management?: boolean | Prisma.Organization$managementArgs<ExtArgs>
  subscription?: boolean | Prisma.Organization$subscriptionArgs<ExtArgs>
  locations?: boolean | Prisma.Organization$locationsArgs<ExtArgs>
  activityLogs?: boolean | Prisma.Organization$activityLogsArgs<ExtArgs>
  _count?: boolean | Prisma.OrganizationCountOutputTypeDefaultArgs<ExtArgs>
}
export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $OrganizationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Organization"
  objects: {
    management: Prisma.$ManagementMembershipPayload<ExtArgs>[]
    subscription: Prisma.$SubscriptionPayload<ExtArgs> | null
    locations: Prisma.$LocationPayload<ExtArgs>[]
    activityLogs: Prisma.$ActivityLogPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    companySize: string | null
    businessWebsite: string | null
    logo: string | null
    slug: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["organization"]>
  composites: {}
}

export type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OrganizationPayload, S>

export type OrganizationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OrganizationCountAggregateInputType | true
  }

export interface OrganizationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
  /**
   * Find zero or one Organization that matches the filter.
   * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
   * @example
   * // Get one Organization
   * const organization = await prisma.organization.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrganizationFindUniqueArgs>(args: Prisma.SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
   * @example
   * // Get one Organization
   * const organization = await prisma.organization.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Organization that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
   * @example
   * // Get one Organization
   * const organization = await prisma.organization.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrganizationFindFirstArgs>(args?: Prisma.SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Organization that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
   * @example
   * // Get one Organization
   * const organization = await prisma.organization.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Organizations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Organizations
   * const organizations = await prisma.organization.findMany()
   * 
   * // Get first 10 Organizations
   * const organizations = await prisma.organization.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OrganizationFindManyArgs>(args?: Prisma.SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Organization.
   * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
   * @example
   * // Create one Organization
   * const Organization = await prisma.organization.create({
   *   data: {
   *     // ... data to create a Organization
   *   }
   * })
   * 
   */
  create<T extends OrganizationCreateArgs>(args: Prisma.SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Organizations.
   * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
   * @example
   * // Create many Organizations
   * const organization = await prisma.organization.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OrganizationCreateManyArgs>(args?: Prisma.SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Organizations and returns the data saved in the database.
   * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
   * @example
   * // Create many Organizations
   * const organization = await prisma.organization.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Organizations and only return the `id`
   * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Organization.
   * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
   * @example
   * // Delete one Organization
   * const Organization = await prisma.organization.delete({
   *   where: {
   *     // ... filter to delete one Organization
   *   }
   * })
   * 
   */
  delete<T extends OrganizationDeleteArgs>(args: Prisma.SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Organization.
   * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
   * @example
   * // Update one Organization
   * const organization = await prisma.organization.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OrganizationUpdateArgs>(args: Prisma.SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Organizations.
   * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
   * @example
   * // Delete a few Organizations
   * const { count } = await prisma.organization.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OrganizationDeleteManyArgs>(args?: Prisma.SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Organizations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Organizations
   * const organization = await prisma.organization.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OrganizationUpdateManyArgs>(args: Prisma.SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Organizations and returns the data updated in the database.
   * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
   * @example
   * // Update many Organizations
   * const organization = await prisma.organization.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Organizations and only return the `id`
   * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Organization.
   * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
   * @example
   * // Update or create a Organization
   * const organization = await prisma.organization.upsert({
   *   create: {
   *     // ... data to create a Organization
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Organization we want to update
   *   }
   * })
   */
  upsert<T extends OrganizationUpsertArgs>(args: Prisma.SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Organizations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
   * @example
   * // Count the number of Organizations
   * const count = await prisma.organization.count({
   *   where: {
   *     // ... the filter for the Organizations we want to count
   *   }
   * })
  **/
  count<T extends OrganizationCountArgs>(
    args?: Prisma.Subset<T, OrganizationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrganizationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Organization.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrganizationAggregateArgs>(args: Prisma.Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

  /**
   * Group by Organization.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OrganizationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrganizationGroupByArgs['orderBy'] }
      : { orderBy?: OrganizationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Organization model
 */
readonly fields: OrganizationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Organization.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  management<T extends Prisma.Organization$managementArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Organization$managementArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  subscription<T extends Prisma.Organization$subscriptionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Organization$subscriptionArgs<ExtArgs>>): Prisma.Prisma__SubscriptionClient<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  locations<T extends Prisma.Organization$locationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Organization$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  activityLogs<T extends Prisma.Organization$activityLogsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Organization$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Organization model
 */
export interface OrganizationFieldRefs {
  readonly id: Prisma.FieldRef<"Organization", 'String'>
  readonly name: Prisma.FieldRef<"Organization", 'String'>
  readonly description: Prisma.FieldRef<"Organization", 'String'>
  readonly companySize: Prisma.FieldRef<"Organization", 'String'>
  readonly businessWebsite: Prisma.FieldRef<"Organization", 'String'>
  readonly logo: Prisma.FieldRef<"Organization", 'String'>
  readonly slug: Prisma.FieldRef<"Organization", 'String'>
  readonly createdAt: Prisma.FieldRef<"Organization", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Organization", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Organization findUnique
 */
export type OrganizationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  /**
   * Filter, which Organization to fetch.
   */
  where: Prisma.OrganizationWhereUniqueInput
}

/**
 * Organization findUniqueOrThrow
 */
export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  /**
   * Filter, which Organization to fetch.
   */
  where: Prisma.OrganizationWhereUniqueInput
}

/**
 * Organization findFirst
 */
export type OrganizationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  /**
   * Filter, which Organization to fetch.
   */
  where?: Prisma.OrganizationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Organizations to fetch.
   */
  orderBy?: Prisma.OrganizationOrderByWithRelationInput | Prisma.OrganizationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Organizations.
   */
  cursor?: Prisma.OrganizationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Organizations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Organizations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Organizations.
   */
  distinct?: Prisma.OrganizationScalarFieldEnum | Prisma.OrganizationScalarFieldEnum[]
}

/**
 * Organization findFirstOrThrow
 */
export type OrganizationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  /**
   * Filter, which Organization to fetch.
   */
  where?: Prisma.OrganizationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Organizations to fetch.
   */
  orderBy?: Prisma.OrganizationOrderByWithRelationInput | Prisma.OrganizationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Organizations.
   */
  cursor?: Prisma.OrganizationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Organizations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Organizations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Organizations.
   */
  distinct?: Prisma.OrganizationScalarFieldEnum | Prisma.OrganizationScalarFieldEnum[]
}

/**
 * Organization findMany
 */
export type OrganizationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  /**
   * Filter, which Organizations to fetch.
   */
  where?: Prisma.OrganizationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Organizations to fetch.
   */
  orderBy?: Prisma.OrganizationOrderByWithRelationInput | Prisma.OrganizationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Organizations.
   */
  cursor?: Prisma.OrganizationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Organizations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Organizations.
   */
  skip?: number
  distinct?: Prisma.OrganizationScalarFieldEnum | Prisma.OrganizationScalarFieldEnum[]
}

/**
 * Organization create
 */
export type OrganizationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  /**
   * The data needed to create a Organization.
   */
  data: Prisma.XOR<Prisma.OrganizationCreateInput, Prisma.OrganizationUncheckedCreateInput>
}

/**
 * Organization createMany
 */
export type OrganizationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Organizations.
   */
  data: Prisma.OrganizationCreateManyInput | Prisma.OrganizationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Organization createManyAndReturn
 */
export type OrganizationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * The data used to create many Organizations.
   */
  data: Prisma.OrganizationCreateManyInput | Prisma.OrganizationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Organization update
 */
export type OrganizationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  /**
   * The data needed to update a Organization.
   */
  data: Prisma.XOR<Prisma.OrganizationUpdateInput, Prisma.OrganizationUncheckedUpdateInput>
  /**
   * Choose, which Organization to update.
   */
  where: Prisma.OrganizationWhereUniqueInput
}

/**
 * Organization updateMany
 */
export type OrganizationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Organizations.
   */
  data: Prisma.XOR<Prisma.OrganizationUpdateManyMutationInput, Prisma.OrganizationUncheckedUpdateManyInput>
  /**
   * Filter which Organizations to update
   */
  where?: Prisma.OrganizationWhereInput
  /**
   * Limit how many Organizations to update.
   */
  limit?: number
}

/**
 * Organization updateManyAndReturn
 */
export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * The data used to update Organizations.
   */
  data: Prisma.XOR<Prisma.OrganizationUpdateManyMutationInput, Prisma.OrganizationUncheckedUpdateManyInput>
  /**
   * Filter which Organizations to update
   */
  where?: Prisma.OrganizationWhereInput
  /**
   * Limit how many Organizations to update.
   */
  limit?: number
}

/**
 * Organization upsert
 */
export type OrganizationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  /**
   * The filter to search for the Organization to update in case it exists.
   */
  where: Prisma.OrganizationWhereUniqueInput
  /**
   * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
   */
  create: Prisma.XOR<Prisma.OrganizationCreateInput, Prisma.OrganizationUncheckedCreateInput>
  /**
   * In case the Organization was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrganizationUpdateInput, Prisma.OrganizationUncheckedUpdateInput>
}

/**
 * Organization delete
 */
export type OrganizationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  /**
   * Filter which Organization to delete.
   */
  where: Prisma.OrganizationWhereUniqueInput
}

/**
 * Organization deleteMany
 */
export type OrganizationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Organizations to delete
   */
  where?: Prisma.OrganizationWhereInput
  /**
   * Limit how many Organizations to delete.
   */
  limit?: number
}

/**
 * Organization.management
 */
export type Organization$managementArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
  where?: Prisma.ManagementMembershipWhereInput
  orderBy?: Prisma.ManagementMembershipOrderByWithRelationInput | Prisma.ManagementMembershipOrderByWithRelationInput[]
  cursor?: Prisma.ManagementMembershipWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ManagementMembershipScalarFieldEnum | Prisma.ManagementMembershipScalarFieldEnum[]
}

/**
 * Organization.subscription
 */
export type Organization$subscriptionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
  where?: Prisma.SubscriptionWhereInput
}

/**
 * Organization.locations
 */
export type Organization$locationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Location
   */
  select?: Prisma.LocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Location
   */
  omit?: Prisma.LocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationInclude<ExtArgs> | null
  where?: Prisma.LocationWhereInput
  orderBy?: Prisma.LocationOrderByWithRelationInput | Prisma.LocationOrderByWithRelationInput[]
  cursor?: Prisma.LocationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LocationScalarFieldEnum | Prisma.LocationScalarFieldEnum[]
}

/**
 * Organization.activityLogs
 */
export type Organization$activityLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityLog
   */
  select?: Prisma.ActivityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityLog
   */
  omit?: Prisma.ActivityLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityLogInclude<ExtArgs> | null
  where?: Prisma.ActivityLogWhereInput
  orderBy?: Prisma.ActivityLogOrderByWithRelationInput | Prisma.ActivityLogOrderByWithRelationInput[]
  cursor?: Prisma.ActivityLogWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ActivityLogScalarFieldEnum | Prisma.ActivityLogScalarFieldEnum[]
}

/**
 * Organization without action
 */
export type OrganizationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
}
