
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `LocationEmployee` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model LocationEmployee
 * 
 */
export type LocationEmployeeModel = runtime.Types.Result.DefaultSelection<Prisma.$LocationEmployeePayload>

export type AggregateLocationEmployee = {
  _count: LocationEmployeeCountAggregateOutputType | null
  _min: LocationEmployeeMinAggregateOutputType | null
  _max: LocationEmployeeMaxAggregateOutputType | null
}

export type LocationEmployeeMinAggregateOutputType = {
  id: string | null
  userId: string | null
  locationId: string | null
  role: $Enums.EmployeeRole | null
  name: string | null
  email: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LocationEmployeeMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  locationId: string | null
  role: $Enums.EmployeeRole | null
  name: string | null
  email: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LocationEmployeeCountAggregateOutputType = {
  id: number
  userId: number
  locationId: number
  role: number
  name: number
  email: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type LocationEmployeeMinAggregateInputType = {
  id?: true
  userId?: true
  locationId?: true
  role?: true
  name?: true
  email?: true
  createdAt?: true
  updatedAt?: true
}

export type LocationEmployeeMaxAggregateInputType = {
  id?: true
  userId?: true
  locationId?: true
  role?: true
  name?: true
  email?: true
  createdAt?: true
  updatedAt?: true
}

export type LocationEmployeeCountAggregateInputType = {
  id?: true
  userId?: true
  locationId?: true
  role?: true
  name?: true
  email?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type LocationEmployeeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LocationEmployee to aggregate.
   */
  where?: Prisma.LocationEmployeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LocationEmployees to fetch.
   */
  orderBy?: Prisma.LocationEmployeeOrderByWithRelationInput | Prisma.LocationEmployeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LocationEmployeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LocationEmployees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LocationEmployees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LocationEmployees
  **/
  _count?: true | LocationEmployeeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LocationEmployeeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LocationEmployeeMaxAggregateInputType
}

export type GetLocationEmployeeAggregateType<T extends LocationEmployeeAggregateArgs> = {
      [P in keyof T & keyof AggregateLocationEmployee]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLocationEmployee[P]>
    : Prisma.GetScalarType<T[P], AggregateLocationEmployee[P]>
}




export type LocationEmployeeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LocationEmployeeWhereInput
  orderBy?: Prisma.LocationEmployeeOrderByWithAggregationInput | Prisma.LocationEmployeeOrderByWithAggregationInput[]
  by: Prisma.LocationEmployeeScalarFieldEnum[] | Prisma.LocationEmployeeScalarFieldEnum
  having?: Prisma.LocationEmployeeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LocationEmployeeCountAggregateInputType | true
  _min?: LocationEmployeeMinAggregateInputType
  _max?: LocationEmployeeMaxAggregateInputType
}

export type LocationEmployeeGroupByOutputType = {
  id: string
  userId: string
  locationId: string
  role: $Enums.EmployeeRole
  name: string
  email: string
  createdAt: Date
  updatedAt: Date
  _count: LocationEmployeeCountAggregateOutputType | null
  _min: LocationEmployeeMinAggregateOutputType | null
  _max: LocationEmployeeMaxAggregateOutputType | null
}

type GetLocationEmployeeGroupByPayload<T extends LocationEmployeeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LocationEmployeeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LocationEmployeeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LocationEmployeeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LocationEmployeeGroupByOutputType[P]>
      }
    >
  >



export type LocationEmployeeWhereInput = {
  AND?: Prisma.LocationEmployeeWhereInput | Prisma.LocationEmployeeWhereInput[]
  OR?: Prisma.LocationEmployeeWhereInput[]
  NOT?: Prisma.LocationEmployeeWhereInput | Prisma.LocationEmployeeWhereInput[]
  id?: Prisma.StringFilter<"LocationEmployee"> | string
  userId?: Prisma.StringFilter<"LocationEmployee"> | string
  locationId?: Prisma.StringFilter<"LocationEmployee"> | string
  role?: Prisma.EnumEmployeeRoleFilter<"LocationEmployee"> | $Enums.EmployeeRole
  name?: Prisma.StringFilter<"LocationEmployee"> | string
  email?: Prisma.StringFilter<"LocationEmployee"> | string
  createdAt?: Prisma.DateTimeFilter<"LocationEmployee"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LocationEmployee"> | Date | string
  location?: Prisma.XOR<Prisma.LocationScalarRelationFilter, Prisma.LocationWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type LocationEmployeeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  locationId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  location?: Prisma.LocationOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type LocationEmployeeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_locationId?: Prisma.LocationEmployeeUserIdLocationIdCompoundUniqueInput
  AND?: Prisma.LocationEmployeeWhereInput | Prisma.LocationEmployeeWhereInput[]
  OR?: Prisma.LocationEmployeeWhereInput[]
  NOT?: Prisma.LocationEmployeeWhereInput | Prisma.LocationEmployeeWhereInput[]
  userId?: Prisma.StringFilter<"LocationEmployee"> | string
  locationId?: Prisma.StringFilter<"LocationEmployee"> | string
  role?: Prisma.EnumEmployeeRoleFilter<"LocationEmployee"> | $Enums.EmployeeRole
  name?: Prisma.StringFilter<"LocationEmployee"> | string
  email?: Prisma.StringFilter<"LocationEmployee"> | string
  createdAt?: Prisma.DateTimeFilter<"LocationEmployee"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LocationEmployee"> | Date | string
  location?: Prisma.XOR<Prisma.LocationScalarRelationFilter, Prisma.LocationWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId_locationId">

export type LocationEmployeeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  locationId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.LocationEmployeeCountOrderByAggregateInput
  _max?: Prisma.LocationEmployeeMaxOrderByAggregateInput
  _min?: Prisma.LocationEmployeeMinOrderByAggregateInput
}

export type LocationEmployeeScalarWhereWithAggregatesInput = {
  AND?: Prisma.LocationEmployeeScalarWhereWithAggregatesInput | Prisma.LocationEmployeeScalarWhereWithAggregatesInput[]
  OR?: Prisma.LocationEmployeeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LocationEmployeeScalarWhereWithAggregatesInput | Prisma.LocationEmployeeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"LocationEmployee"> | string
  userId?: Prisma.StringWithAggregatesFilter<"LocationEmployee"> | string
  locationId?: Prisma.StringWithAggregatesFilter<"LocationEmployee"> | string
  role?: Prisma.EnumEmployeeRoleWithAggregatesFilter<"LocationEmployee"> | $Enums.EmployeeRole
  name?: Prisma.StringWithAggregatesFilter<"LocationEmployee"> | string
  email?: Prisma.StringWithAggregatesFilter<"LocationEmployee"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"LocationEmployee"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"LocationEmployee"> | Date | string
}

export type LocationEmployeeCreateInput = {
  id?: string
  role?: $Enums.EmployeeRole
  name: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  location: Prisma.LocationCreateNestedOneWithoutEmployeesInput
  user: Prisma.UserCreateNestedOneWithoutLocationEmployeesInput
}

export type LocationEmployeeUncheckedCreateInput = {
  id?: string
  userId: string
  locationId: string
  role?: $Enums.EmployeeRole
  name: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LocationEmployeeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  location?: Prisma.LocationUpdateOneRequiredWithoutEmployeesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutLocationEmployeesNestedInput
}

export type LocationEmployeeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  locationId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationEmployeeCreateManyInput = {
  id?: string
  userId: string
  locationId: string
  role?: $Enums.EmployeeRole
  name: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LocationEmployeeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationEmployeeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  locationId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationEmployeeListRelationFilter = {
  every?: Prisma.LocationEmployeeWhereInput
  some?: Prisma.LocationEmployeeWhereInput
  none?: Prisma.LocationEmployeeWhereInput
}

export type LocationEmployeeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LocationEmployeeUserIdLocationIdCompoundUniqueInput = {
  userId: string
  locationId: string
}

export type LocationEmployeeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  locationId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LocationEmployeeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  locationId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LocationEmployeeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  locationId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LocationEmployeeCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutUserInput, Prisma.LocationEmployeeUncheckedCreateWithoutUserInput> | Prisma.LocationEmployeeCreateWithoutUserInput[] | Prisma.LocationEmployeeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LocationEmployeeCreateOrConnectWithoutUserInput | Prisma.LocationEmployeeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.LocationEmployeeCreateManyUserInputEnvelope
  connect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
}

export type LocationEmployeeUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutUserInput, Prisma.LocationEmployeeUncheckedCreateWithoutUserInput> | Prisma.LocationEmployeeCreateWithoutUserInput[] | Prisma.LocationEmployeeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LocationEmployeeCreateOrConnectWithoutUserInput | Prisma.LocationEmployeeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.LocationEmployeeCreateManyUserInputEnvelope
  connect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
}

export type LocationEmployeeUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutUserInput, Prisma.LocationEmployeeUncheckedCreateWithoutUserInput> | Prisma.LocationEmployeeCreateWithoutUserInput[] | Prisma.LocationEmployeeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LocationEmployeeCreateOrConnectWithoutUserInput | Prisma.LocationEmployeeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.LocationEmployeeUpsertWithWhereUniqueWithoutUserInput | Prisma.LocationEmployeeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.LocationEmployeeCreateManyUserInputEnvelope
  set?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  disconnect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  delete?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  connect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  update?: Prisma.LocationEmployeeUpdateWithWhereUniqueWithoutUserInput | Prisma.LocationEmployeeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.LocationEmployeeUpdateManyWithWhereWithoutUserInput | Prisma.LocationEmployeeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.LocationEmployeeScalarWhereInput | Prisma.LocationEmployeeScalarWhereInput[]
}

export type LocationEmployeeUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutUserInput, Prisma.LocationEmployeeUncheckedCreateWithoutUserInput> | Prisma.LocationEmployeeCreateWithoutUserInput[] | Prisma.LocationEmployeeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LocationEmployeeCreateOrConnectWithoutUserInput | Prisma.LocationEmployeeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.LocationEmployeeUpsertWithWhereUniqueWithoutUserInput | Prisma.LocationEmployeeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.LocationEmployeeCreateManyUserInputEnvelope
  set?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  disconnect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  delete?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  connect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  update?: Prisma.LocationEmployeeUpdateWithWhereUniqueWithoutUserInput | Prisma.LocationEmployeeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.LocationEmployeeUpdateManyWithWhereWithoutUserInput | Prisma.LocationEmployeeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.LocationEmployeeScalarWhereInput | Prisma.LocationEmployeeScalarWhereInput[]
}

export type LocationEmployeeCreateNestedManyWithoutLocationInput = {
  create?: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutLocationInput, Prisma.LocationEmployeeUncheckedCreateWithoutLocationInput> | Prisma.LocationEmployeeCreateWithoutLocationInput[] | Prisma.LocationEmployeeUncheckedCreateWithoutLocationInput[]
  connectOrCreate?: Prisma.LocationEmployeeCreateOrConnectWithoutLocationInput | Prisma.LocationEmployeeCreateOrConnectWithoutLocationInput[]
  createMany?: Prisma.LocationEmployeeCreateManyLocationInputEnvelope
  connect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
}

export type LocationEmployeeUncheckedCreateNestedManyWithoutLocationInput = {
  create?: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutLocationInput, Prisma.LocationEmployeeUncheckedCreateWithoutLocationInput> | Prisma.LocationEmployeeCreateWithoutLocationInput[] | Prisma.LocationEmployeeUncheckedCreateWithoutLocationInput[]
  connectOrCreate?: Prisma.LocationEmployeeCreateOrConnectWithoutLocationInput | Prisma.LocationEmployeeCreateOrConnectWithoutLocationInput[]
  createMany?: Prisma.LocationEmployeeCreateManyLocationInputEnvelope
  connect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
}

export type LocationEmployeeUpdateManyWithoutLocationNestedInput = {
  create?: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutLocationInput, Prisma.LocationEmployeeUncheckedCreateWithoutLocationInput> | Prisma.LocationEmployeeCreateWithoutLocationInput[] | Prisma.LocationEmployeeUncheckedCreateWithoutLocationInput[]
  connectOrCreate?: Prisma.LocationEmployeeCreateOrConnectWithoutLocationInput | Prisma.LocationEmployeeCreateOrConnectWithoutLocationInput[]
  upsert?: Prisma.LocationEmployeeUpsertWithWhereUniqueWithoutLocationInput | Prisma.LocationEmployeeUpsertWithWhereUniqueWithoutLocationInput[]
  createMany?: Prisma.LocationEmployeeCreateManyLocationInputEnvelope
  set?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  disconnect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  delete?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  connect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  update?: Prisma.LocationEmployeeUpdateWithWhereUniqueWithoutLocationInput | Prisma.LocationEmployeeUpdateWithWhereUniqueWithoutLocationInput[]
  updateMany?: Prisma.LocationEmployeeUpdateManyWithWhereWithoutLocationInput | Prisma.LocationEmployeeUpdateManyWithWhereWithoutLocationInput[]
  deleteMany?: Prisma.LocationEmployeeScalarWhereInput | Prisma.LocationEmployeeScalarWhereInput[]
}

export type LocationEmployeeUncheckedUpdateManyWithoutLocationNestedInput = {
  create?: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutLocationInput, Prisma.LocationEmployeeUncheckedCreateWithoutLocationInput> | Prisma.LocationEmployeeCreateWithoutLocationInput[] | Prisma.LocationEmployeeUncheckedCreateWithoutLocationInput[]
  connectOrCreate?: Prisma.LocationEmployeeCreateOrConnectWithoutLocationInput | Prisma.LocationEmployeeCreateOrConnectWithoutLocationInput[]
  upsert?: Prisma.LocationEmployeeUpsertWithWhereUniqueWithoutLocationInput | Prisma.LocationEmployeeUpsertWithWhereUniqueWithoutLocationInput[]
  createMany?: Prisma.LocationEmployeeCreateManyLocationInputEnvelope
  set?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  disconnect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  delete?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  connect?: Prisma.LocationEmployeeWhereUniqueInput | Prisma.LocationEmployeeWhereUniqueInput[]
  update?: Prisma.LocationEmployeeUpdateWithWhereUniqueWithoutLocationInput | Prisma.LocationEmployeeUpdateWithWhereUniqueWithoutLocationInput[]
  updateMany?: Prisma.LocationEmployeeUpdateManyWithWhereWithoutLocationInput | Prisma.LocationEmployeeUpdateManyWithWhereWithoutLocationInput[]
  deleteMany?: Prisma.LocationEmployeeScalarWhereInput | Prisma.LocationEmployeeScalarWhereInput[]
}

export type EnumEmployeeRoleFieldUpdateOperationsInput = {
  set?: $Enums.EmployeeRole
}

export type LocationEmployeeCreateWithoutUserInput = {
  id?: string
  role?: $Enums.EmployeeRole
  name: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  location: Prisma.LocationCreateNestedOneWithoutEmployeesInput
}

export type LocationEmployeeUncheckedCreateWithoutUserInput = {
  id?: string
  locationId: string
  role?: $Enums.EmployeeRole
  name: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LocationEmployeeCreateOrConnectWithoutUserInput = {
  where: Prisma.LocationEmployeeWhereUniqueInput
  create: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutUserInput, Prisma.LocationEmployeeUncheckedCreateWithoutUserInput>
}

export type LocationEmployeeCreateManyUserInputEnvelope = {
  data: Prisma.LocationEmployeeCreateManyUserInput | Prisma.LocationEmployeeCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type LocationEmployeeUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.LocationEmployeeWhereUniqueInput
  update: Prisma.XOR<Prisma.LocationEmployeeUpdateWithoutUserInput, Prisma.LocationEmployeeUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutUserInput, Prisma.LocationEmployeeUncheckedCreateWithoutUserInput>
}

export type LocationEmployeeUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.LocationEmployeeWhereUniqueInput
  data: Prisma.XOR<Prisma.LocationEmployeeUpdateWithoutUserInput, Prisma.LocationEmployeeUncheckedUpdateWithoutUserInput>
}

export type LocationEmployeeUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.LocationEmployeeScalarWhereInput
  data: Prisma.XOR<Prisma.LocationEmployeeUpdateManyMutationInput, Prisma.LocationEmployeeUncheckedUpdateManyWithoutUserInput>
}

export type LocationEmployeeScalarWhereInput = {
  AND?: Prisma.LocationEmployeeScalarWhereInput | Prisma.LocationEmployeeScalarWhereInput[]
  OR?: Prisma.LocationEmployeeScalarWhereInput[]
  NOT?: Prisma.LocationEmployeeScalarWhereInput | Prisma.LocationEmployeeScalarWhereInput[]
  id?: Prisma.StringFilter<"LocationEmployee"> | string
  userId?: Prisma.StringFilter<"LocationEmployee"> | string
  locationId?: Prisma.StringFilter<"LocationEmployee"> | string
  role?: Prisma.EnumEmployeeRoleFilter<"LocationEmployee"> | $Enums.EmployeeRole
  name?: Prisma.StringFilter<"LocationEmployee"> | string
  email?: Prisma.StringFilter<"LocationEmployee"> | string
  createdAt?: Prisma.DateTimeFilter<"LocationEmployee"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LocationEmployee"> | Date | string
}

export type LocationEmployeeCreateWithoutLocationInput = {
  id?: string
  role?: $Enums.EmployeeRole
  name: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutLocationEmployeesInput
}

export type LocationEmployeeUncheckedCreateWithoutLocationInput = {
  id?: string
  userId: string
  role?: $Enums.EmployeeRole
  name: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LocationEmployeeCreateOrConnectWithoutLocationInput = {
  where: Prisma.LocationEmployeeWhereUniqueInput
  create: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutLocationInput, Prisma.LocationEmployeeUncheckedCreateWithoutLocationInput>
}

export type LocationEmployeeCreateManyLocationInputEnvelope = {
  data: Prisma.LocationEmployeeCreateManyLocationInput | Prisma.LocationEmployeeCreateManyLocationInput[]
  skipDuplicates?: boolean
}

export type LocationEmployeeUpsertWithWhereUniqueWithoutLocationInput = {
  where: Prisma.LocationEmployeeWhereUniqueInput
  update: Prisma.XOR<Prisma.LocationEmployeeUpdateWithoutLocationInput, Prisma.LocationEmployeeUncheckedUpdateWithoutLocationInput>
  create: Prisma.XOR<Prisma.LocationEmployeeCreateWithoutLocationInput, Prisma.LocationEmployeeUncheckedCreateWithoutLocationInput>
}

export type LocationEmployeeUpdateWithWhereUniqueWithoutLocationInput = {
  where: Prisma.LocationEmployeeWhereUniqueInput
  data: Prisma.XOR<Prisma.LocationEmployeeUpdateWithoutLocationInput, Prisma.LocationEmployeeUncheckedUpdateWithoutLocationInput>
}

export type LocationEmployeeUpdateManyWithWhereWithoutLocationInput = {
  where: Prisma.LocationEmployeeScalarWhereInput
  data: Prisma.XOR<Prisma.LocationEmployeeUpdateManyMutationInput, Prisma.LocationEmployeeUncheckedUpdateManyWithoutLocationInput>
}

export type LocationEmployeeCreateManyUserInput = {
  id?: string
  locationId: string
  role?: $Enums.EmployeeRole
  name: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LocationEmployeeUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  location?: Prisma.LocationUpdateOneRequiredWithoutEmployeesNestedInput
}

export type LocationEmployeeUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  locationId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationEmployeeUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  locationId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationEmployeeCreateManyLocationInput = {
  id?: string
  userId: string
  role?: $Enums.EmployeeRole
  name: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LocationEmployeeUpdateWithoutLocationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutLocationEmployeesNestedInput
}

export type LocationEmployeeUncheckedUpdateWithoutLocationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationEmployeeUncheckedUpdateManyWithoutLocationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumEmployeeRoleFieldUpdateOperationsInput | $Enums.EmployeeRole
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type LocationEmployeeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  locationId?: boolean
  role?: boolean
  name?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["locationEmployee"]>

export type LocationEmployeeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  locationId?: boolean
  role?: boolean
  name?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["locationEmployee"]>

export type LocationEmployeeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  locationId?: boolean
  role?: boolean
  name?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["locationEmployee"]>

export type LocationEmployeeSelectScalar = {
  id?: boolean
  userId?: boolean
  locationId?: boolean
  role?: boolean
  name?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type LocationEmployeeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "locationId" | "role" | "name" | "email" | "createdAt" | "updatedAt", ExtArgs["result"]["locationEmployee"]>
export type LocationEmployeeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type LocationEmployeeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type LocationEmployeeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  location?: boolean | Prisma.LocationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $LocationEmployeePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LocationEmployee"
  objects: {
    location: Prisma.$LocationPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    locationId: string
    role: $Enums.EmployeeRole
    name: string
    email: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["locationEmployee"]>
  composites: {}
}

export type LocationEmployeeGetPayload<S extends boolean | null | undefined | LocationEmployeeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload, S>

export type LocationEmployeeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LocationEmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LocationEmployeeCountAggregateInputType | true
  }

export interface LocationEmployeeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationEmployee'], meta: { name: 'LocationEmployee' } }
  /**
   * Find zero or one LocationEmployee that matches the filter.
   * @param {LocationEmployeeFindUniqueArgs} args - Arguments to find a LocationEmployee
   * @example
   * // Get one LocationEmployee
   * const locationEmployee = await prisma.locationEmployee.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LocationEmployeeFindUniqueArgs>(args: Prisma.SelectSubset<T, LocationEmployeeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LocationEmployeeClient<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LocationEmployee that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LocationEmployeeFindUniqueOrThrowArgs} args - Arguments to find a LocationEmployee
   * @example
   * // Get one LocationEmployee
   * const locationEmployee = await prisma.locationEmployee.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LocationEmployeeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LocationEmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LocationEmployeeClient<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LocationEmployee that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationEmployeeFindFirstArgs} args - Arguments to find a LocationEmployee
   * @example
   * // Get one LocationEmployee
   * const locationEmployee = await prisma.locationEmployee.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LocationEmployeeFindFirstArgs>(args?: Prisma.SelectSubset<T, LocationEmployeeFindFirstArgs<ExtArgs>>): Prisma.Prisma__LocationEmployeeClient<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LocationEmployee that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationEmployeeFindFirstOrThrowArgs} args - Arguments to find a LocationEmployee
   * @example
   * // Get one LocationEmployee
   * const locationEmployee = await prisma.locationEmployee.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LocationEmployeeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LocationEmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LocationEmployeeClient<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LocationEmployees that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationEmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LocationEmployees
   * const locationEmployees = await prisma.locationEmployee.findMany()
   * 
   * // Get first 10 LocationEmployees
   * const locationEmployees = await prisma.locationEmployee.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const locationEmployeeWithIdOnly = await prisma.locationEmployee.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LocationEmployeeFindManyArgs>(args?: Prisma.SelectSubset<T, LocationEmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LocationEmployee.
   * @param {LocationEmployeeCreateArgs} args - Arguments to create a LocationEmployee.
   * @example
   * // Create one LocationEmployee
   * const LocationEmployee = await prisma.locationEmployee.create({
   *   data: {
   *     // ... data to create a LocationEmployee
   *   }
   * })
   * 
   */
  create<T extends LocationEmployeeCreateArgs>(args: Prisma.SelectSubset<T, LocationEmployeeCreateArgs<ExtArgs>>): Prisma.Prisma__LocationEmployeeClient<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LocationEmployees.
   * @param {LocationEmployeeCreateManyArgs} args - Arguments to create many LocationEmployees.
   * @example
   * // Create many LocationEmployees
   * const locationEmployee = await prisma.locationEmployee.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LocationEmployeeCreateManyArgs>(args?: Prisma.SelectSubset<T, LocationEmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LocationEmployees and returns the data saved in the database.
   * @param {LocationEmployeeCreateManyAndReturnArgs} args - Arguments to create many LocationEmployees.
   * @example
   * // Create many LocationEmployees
   * const locationEmployee = await prisma.locationEmployee.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LocationEmployees and only return the `id`
   * const locationEmployeeWithIdOnly = await prisma.locationEmployee.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LocationEmployeeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LocationEmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LocationEmployee.
   * @param {LocationEmployeeDeleteArgs} args - Arguments to delete one LocationEmployee.
   * @example
   * // Delete one LocationEmployee
   * const LocationEmployee = await prisma.locationEmployee.delete({
   *   where: {
   *     // ... filter to delete one LocationEmployee
   *   }
   * })
   * 
   */
  delete<T extends LocationEmployeeDeleteArgs>(args: Prisma.SelectSubset<T, LocationEmployeeDeleteArgs<ExtArgs>>): Prisma.Prisma__LocationEmployeeClient<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LocationEmployee.
   * @param {LocationEmployeeUpdateArgs} args - Arguments to update one LocationEmployee.
   * @example
   * // Update one LocationEmployee
   * const locationEmployee = await prisma.locationEmployee.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LocationEmployeeUpdateArgs>(args: Prisma.SelectSubset<T, LocationEmployeeUpdateArgs<ExtArgs>>): Prisma.Prisma__LocationEmployeeClient<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LocationEmployees.
   * @param {LocationEmployeeDeleteManyArgs} args - Arguments to filter LocationEmployees to delete.
   * @example
   * // Delete a few LocationEmployees
   * const { count } = await prisma.locationEmployee.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LocationEmployeeDeleteManyArgs>(args?: Prisma.SelectSubset<T, LocationEmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LocationEmployees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationEmployeeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LocationEmployees
   * const locationEmployee = await prisma.locationEmployee.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LocationEmployeeUpdateManyArgs>(args: Prisma.SelectSubset<T, LocationEmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LocationEmployees and returns the data updated in the database.
   * @param {LocationEmployeeUpdateManyAndReturnArgs} args - Arguments to update many LocationEmployees.
   * @example
   * // Update many LocationEmployees
   * const locationEmployee = await prisma.locationEmployee.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LocationEmployees and only return the `id`
   * const locationEmployeeWithIdOnly = await prisma.locationEmployee.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LocationEmployeeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LocationEmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LocationEmployee.
   * @param {LocationEmployeeUpsertArgs} args - Arguments to update or create a LocationEmployee.
   * @example
   * // Update or create a LocationEmployee
   * const locationEmployee = await prisma.locationEmployee.upsert({
   *   create: {
   *     // ... data to create a LocationEmployee
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LocationEmployee we want to update
   *   }
   * })
   */
  upsert<T extends LocationEmployeeUpsertArgs>(args: Prisma.SelectSubset<T, LocationEmployeeUpsertArgs<ExtArgs>>): Prisma.Prisma__LocationEmployeeClient<runtime.Types.Result.GetResult<Prisma.$LocationEmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LocationEmployees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationEmployeeCountArgs} args - Arguments to filter LocationEmployees to count.
   * @example
   * // Count the number of LocationEmployees
   * const count = await prisma.locationEmployee.count({
   *   where: {
   *     // ... the filter for the LocationEmployees we want to count
   *   }
   * })
  **/
  count<T extends LocationEmployeeCountArgs>(
    args?: Prisma.Subset<T, LocationEmployeeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LocationEmployeeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LocationEmployee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationEmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LocationEmployeeAggregateArgs>(args: Prisma.Subset<T, LocationEmployeeAggregateArgs>): Prisma.PrismaPromise<GetLocationEmployeeAggregateType<T>>

  /**
   * Group by LocationEmployee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationEmployeeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LocationEmployeeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LocationEmployeeGroupByArgs['orderBy'] }
      : { orderBy?: LocationEmployeeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LocationEmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LocationEmployee model
 */
readonly fields: LocationEmployeeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LocationEmployee.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LocationEmployeeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  location<T extends Prisma.LocationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LocationDefaultArgs<ExtArgs>>): Prisma.Prisma__LocationClient<runtime.Types.Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LocationEmployee model
 */
export interface LocationEmployeeFieldRefs {
  readonly id: Prisma.FieldRef<"LocationEmployee", 'String'>
  readonly userId: Prisma.FieldRef<"LocationEmployee", 'String'>
  readonly locationId: Prisma.FieldRef<"LocationEmployee", 'String'>
  readonly role: Prisma.FieldRef<"LocationEmployee", 'EmployeeRole'>
  readonly name: Prisma.FieldRef<"LocationEmployee", 'String'>
  readonly email: Prisma.FieldRef<"LocationEmployee", 'String'>
  readonly createdAt: Prisma.FieldRef<"LocationEmployee", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"LocationEmployee", 'DateTime'>
}
    

// Custom InputTypes
/**
 * LocationEmployee findUnique
 */
export type LocationEmployeeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeInclude<ExtArgs> | null
  /**
   * Filter, which LocationEmployee to fetch.
   */
  where: Prisma.LocationEmployeeWhereUniqueInput
}

/**
 * LocationEmployee findUniqueOrThrow
 */
export type LocationEmployeeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeInclude<ExtArgs> | null
  /**
   * Filter, which LocationEmployee to fetch.
   */
  where: Prisma.LocationEmployeeWhereUniqueInput
}

/**
 * LocationEmployee findFirst
 */
export type LocationEmployeeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeInclude<ExtArgs> | null
  /**
   * Filter, which LocationEmployee to fetch.
   */
  where?: Prisma.LocationEmployeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LocationEmployees to fetch.
   */
  orderBy?: Prisma.LocationEmployeeOrderByWithRelationInput | Prisma.LocationEmployeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LocationEmployees.
   */
  cursor?: Prisma.LocationEmployeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LocationEmployees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LocationEmployees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LocationEmployees.
   */
  distinct?: Prisma.LocationEmployeeScalarFieldEnum | Prisma.LocationEmployeeScalarFieldEnum[]
}

/**
 * LocationEmployee findFirstOrThrow
 */
export type LocationEmployeeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeInclude<ExtArgs> | null
  /**
   * Filter, which LocationEmployee to fetch.
   */
  where?: Prisma.LocationEmployeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LocationEmployees to fetch.
   */
  orderBy?: Prisma.LocationEmployeeOrderByWithRelationInput | Prisma.LocationEmployeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LocationEmployees.
   */
  cursor?: Prisma.LocationEmployeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LocationEmployees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LocationEmployees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LocationEmployees.
   */
  distinct?: Prisma.LocationEmployeeScalarFieldEnum | Prisma.LocationEmployeeScalarFieldEnum[]
}

/**
 * LocationEmployee findMany
 */
export type LocationEmployeeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeInclude<ExtArgs> | null
  /**
   * Filter, which LocationEmployees to fetch.
   */
  where?: Prisma.LocationEmployeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LocationEmployees to fetch.
   */
  orderBy?: Prisma.LocationEmployeeOrderByWithRelationInput | Prisma.LocationEmployeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LocationEmployees.
   */
  cursor?: Prisma.LocationEmployeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LocationEmployees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LocationEmployees.
   */
  skip?: number
  distinct?: Prisma.LocationEmployeeScalarFieldEnum | Prisma.LocationEmployeeScalarFieldEnum[]
}

/**
 * LocationEmployee create
 */
export type LocationEmployeeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeInclude<ExtArgs> | null
  /**
   * The data needed to create a LocationEmployee.
   */
  data: Prisma.XOR<Prisma.LocationEmployeeCreateInput, Prisma.LocationEmployeeUncheckedCreateInput>
}

/**
 * LocationEmployee createMany
 */
export type LocationEmployeeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LocationEmployees.
   */
  data: Prisma.LocationEmployeeCreateManyInput | Prisma.LocationEmployeeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LocationEmployee createManyAndReturn
 */
export type LocationEmployeeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * The data used to create many LocationEmployees.
   */
  data: Prisma.LocationEmployeeCreateManyInput | Prisma.LocationEmployeeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * LocationEmployee update
 */
export type LocationEmployeeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeInclude<ExtArgs> | null
  /**
   * The data needed to update a LocationEmployee.
   */
  data: Prisma.XOR<Prisma.LocationEmployeeUpdateInput, Prisma.LocationEmployeeUncheckedUpdateInput>
  /**
   * Choose, which LocationEmployee to update.
   */
  where: Prisma.LocationEmployeeWhereUniqueInput
}

/**
 * LocationEmployee updateMany
 */
export type LocationEmployeeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LocationEmployees.
   */
  data: Prisma.XOR<Prisma.LocationEmployeeUpdateManyMutationInput, Prisma.LocationEmployeeUncheckedUpdateManyInput>
  /**
   * Filter which LocationEmployees to update
   */
  where?: Prisma.LocationEmployeeWhereInput
  /**
   * Limit how many LocationEmployees to update.
   */
  limit?: number
}

/**
 * LocationEmployee updateManyAndReturn
 */
export type LocationEmployeeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * The data used to update LocationEmployees.
   */
  data: Prisma.XOR<Prisma.LocationEmployeeUpdateManyMutationInput, Prisma.LocationEmployeeUncheckedUpdateManyInput>
  /**
   * Filter which LocationEmployees to update
   */
  where?: Prisma.LocationEmployeeWhereInput
  /**
   * Limit how many LocationEmployees to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * LocationEmployee upsert
 */
export type LocationEmployeeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeInclude<ExtArgs> | null
  /**
   * The filter to search for the LocationEmployee to update in case it exists.
   */
  where: Prisma.LocationEmployeeWhereUniqueInput
  /**
   * In case the LocationEmployee found by the `where` argument doesn't exist, create a new LocationEmployee with this data.
   */
  create: Prisma.XOR<Prisma.LocationEmployeeCreateInput, Prisma.LocationEmployeeUncheckedCreateInput>
  /**
   * In case the LocationEmployee was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LocationEmployeeUpdateInput, Prisma.LocationEmployeeUncheckedUpdateInput>
}

/**
 * LocationEmployee delete
 */
export type LocationEmployeeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeInclude<ExtArgs> | null
  /**
   * Filter which LocationEmployee to delete.
   */
  where: Prisma.LocationEmployeeWhereUniqueInput
}

/**
 * LocationEmployee deleteMany
 */
export type LocationEmployeeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LocationEmployees to delete
   */
  where?: Prisma.LocationEmployeeWhereInput
  /**
   * Limit how many LocationEmployees to delete.
   */
  limit?: number
}

/**
 * LocationEmployee without action
 */
export type LocationEmployeeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationEmployee
   */
  select?: Prisma.LocationEmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationEmployee
   */
  omit?: Prisma.LocationEmployeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationEmployeeInclude<ExtArgs> | null
}
