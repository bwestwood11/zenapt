
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `DemoRequest` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DemoRequest
 * 
 */
export type DemoRequestModel = runtime.Types.Result.DefaultSelection<Prisma.$DemoRequestPayload>

export type AggregateDemoRequest = {
  _count: DemoRequestCountAggregateOutputType | null
  _min: DemoRequestMinAggregateOutputType | null
  _max: DemoRequestMaxAggregateOutputType | null
}

export type DemoRequestMinAggregateOutputType = {
  id: string | null
  firstName: string | null
  lastName: string | null
  businessName: string | null
  email: string | null
  cellPhone: string | null
  numberOfLocations: string | null
  zipCode: string | null
  websiteUrl: string | null
  demoTime: Date | null
}

export type DemoRequestMaxAggregateOutputType = {
  id: string | null
  firstName: string | null
  lastName: string | null
  businessName: string | null
  email: string | null
  cellPhone: string | null
  numberOfLocations: string | null
  zipCode: string | null
  websiteUrl: string | null
  demoTime: Date | null
}

export type DemoRequestCountAggregateOutputType = {
  id: number
  firstName: number
  lastName: number
  businessName: number
  email: number
  cellPhone: number
  numberOfLocations: number
  zipCode: number
  websiteUrl: number
  demoTime: number
  _all: number
}


export type DemoRequestMinAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  businessName?: true
  email?: true
  cellPhone?: true
  numberOfLocations?: true
  zipCode?: true
  websiteUrl?: true
  demoTime?: true
}

export type DemoRequestMaxAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  businessName?: true
  email?: true
  cellPhone?: true
  numberOfLocations?: true
  zipCode?: true
  websiteUrl?: true
  demoTime?: true
}

export type DemoRequestCountAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  businessName?: true
  email?: true
  cellPhone?: true
  numberOfLocations?: true
  zipCode?: true
  websiteUrl?: true
  demoTime?: true
  _all?: true
}

export type DemoRequestAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DemoRequest to aggregate.
   */
  where?: Prisma.DemoRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DemoRequests to fetch.
   */
  orderBy?: Prisma.DemoRequestOrderByWithRelationInput | Prisma.DemoRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DemoRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DemoRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DemoRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DemoRequests
  **/
  _count?: true | DemoRequestCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DemoRequestMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DemoRequestMaxAggregateInputType
}

export type GetDemoRequestAggregateType<T extends DemoRequestAggregateArgs> = {
      [P in keyof T & keyof AggregateDemoRequest]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDemoRequest[P]>
    : Prisma.GetScalarType<T[P], AggregateDemoRequest[P]>
}




export type DemoRequestGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DemoRequestWhereInput
  orderBy?: Prisma.DemoRequestOrderByWithAggregationInput | Prisma.DemoRequestOrderByWithAggregationInput[]
  by: Prisma.DemoRequestScalarFieldEnum[] | Prisma.DemoRequestScalarFieldEnum
  having?: Prisma.DemoRequestScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DemoRequestCountAggregateInputType | true
  _min?: DemoRequestMinAggregateInputType
  _max?: DemoRequestMaxAggregateInputType
}

export type DemoRequestGroupByOutputType = {
  id: string
  firstName: string
  lastName: string
  businessName: string
  email: string
  cellPhone: string
  numberOfLocations: string
  zipCode: string
  websiteUrl: string
  demoTime: Date
  _count: DemoRequestCountAggregateOutputType | null
  _min: DemoRequestMinAggregateOutputType | null
  _max: DemoRequestMaxAggregateOutputType | null
}

type GetDemoRequestGroupByPayload<T extends DemoRequestGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DemoRequestGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DemoRequestGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DemoRequestGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DemoRequestGroupByOutputType[P]>
      }
    >
  >



export type DemoRequestWhereInput = {
  AND?: Prisma.DemoRequestWhereInput | Prisma.DemoRequestWhereInput[]
  OR?: Prisma.DemoRequestWhereInput[]
  NOT?: Prisma.DemoRequestWhereInput | Prisma.DemoRequestWhereInput[]
  id?: Prisma.StringFilter<"DemoRequest"> | string
  firstName?: Prisma.StringFilter<"DemoRequest"> | string
  lastName?: Prisma.StringFilter<"DemoRequest"> | string
  businessName?: Prisma.StringFilter<"DemoRequest"> | string
  email?: Prisma.StringFilter<"DemoRequest"> | string
  cellPhone?: Prisma.StringFilter<"DemoRequest"> | string
  numberOfLocations?: Prisma.StringFilter<"DemoRequest"> | string
  zipCode?: Prisma.StringFilter<"DemoRequest"> | string
  websiteUrl?: Prisma.StringFilter<"DemoRequest"> | string
  demoTime?: Prisma.DateTimeFilter<"DemoRequest"> | Date | string
}

export type DemoRequestOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  businessName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  cellPhone?: Prisma.SortOrder
  numberOfLocations?: Prisma.SortOrder
  zipCode?: Prisma.SortOrder
  websiteUrl?: Prisma.SortOrder
  demoTime?: Prisma.SortOrder
}

export type DemoRequestWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DemoRequestWhereInput | Prisma.DemoRequestWhereInput[]
  OR?: Prisma.DemoRequestWhereInput[]
  NOT?: Prisma.DemoRequestWhereInput | Prisma.DemoRequestWhereInput[]
  firstName?: Prisma.StringFilter<"DemoRequest"> | string
  lastName?: Prisma.StringFilter<"DemoRequest"> | string
  businessName?: Prisma.StringFilter<"DemoRequest"> | string
  email?: Prisma.StringFilter<"DemoRequest"> | string
  cellPhone?: Prisma.StringFilter<"DemoRequest"> | string
  numberOfLocations?: Prisma.StringFilter<"DemoRequest"> | string
  zipCode?: Prisma.StringFilter<"DemoRequest"> | string
  websiteUrl?: Prisma.StringFilter<"DemoRequest"> | string
  demoTime?: Prisma.DateTimeFilter<"DemoRequest"> | Date | string
}, "id">

export type DemoRequestOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  businessName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  cellPhone?: Prisma.SortOrder
  numberOfLocations?: Prisma.SortOrder
  zipCode?: Prisma.SortOrder
  websiteUrl?: Prisma.SortOrder
  demoTime?: Prisma.SortOrder
  _count?: Prisma.DemoRequestCountOrderByAggregateInput
  _max?: Prisma.DemoRequestMaxOrderByAggregateInput
  _min?: Prisma.DemoRequestMinOrderByAggregateInput
}

export type DemoRequestScalarWhereWithAggregatesInput = {
  AND?: Prisma.DemoRequestScalarWhereWithAggregatesInput | Prisma.DemoRequestScalarWhereWithAggregatesInput[]
  OR?: Prisma.DemoRequestScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DemoRequestScalarWhereWithAggregatesInput | Prisma.DemoRequestScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DemoRequest"> | string
  firstName?: Prisma.StringWithAggregatesFilter<"DemoRequest"> | string
  lastName?: Prisma.StringWithAggregatesFilter<"DemoRequest"> | string
  businessName?: Prisma.StringWithAggregatesFilter<"DemoRequest"> | string
  email?: Prisma.StringWithAggregatesFilter<"DemoRequest"> | string
  cellPhone?: Prisma.StringWithAggregatesFilter<"DemoRequest"> | string
  numberOfLocations?: Prisma.StringWithAggregatesFilter<"DemoRequest"> | string
  zipCode?: Prisma.StringWithAggregatesFilter<"DemoRequest"> | string
  websiteUrl?: Prisma.StringWithAggregatesFilter<"DemoRequest"> | string
  demoTime?: Prisma.DateTimeWithAggregatesFilter<"DemoRequest"> | Date | string
}

export type DemoRequestCreateInput = {
  id?: string
  firstName: string
  lastName: string
  businessName: string
  email: string
  cellPhone: string
  numberOfLocations: string
  zipCode: string
  websiteUrl: string
  demoTime: Date | string
}

export type DemoRequestUncheckedCreateInput = {
  id?: string
  firstName: string
  lastName: string
  businessName: string
  email: string
  cellPhone: string
  numberOfLocations: string
  zipCode: string
  websiteUrl: string
  demoTime: Date | string
}

export type DemoRequestUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  businessName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  cellPhone?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfLocations?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  websiteUrl?: Prisma.StringFieldUpdateOperationsInput | string
  demoTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DemoRequestUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  businessName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  cellPhone?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfLocations?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  websiteUrl?: Prisma.StringFieldUpdateOperationsInput | string
  demoTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DemoRequestCreateManyInput = {
  id?: string
  firstName: string
  lastName: string
  businessName: string
  email: string
  cellPhone: string
  numberOfLocations: string
  zipCode: string
  websiteUrl: string
  demoTime: Date | string
}

export type DemoRequestUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  businessName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  cellPhone?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfLocations?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  websiteUrl?: Prisma.StringFieldUpdateOperationsInput | string
  demoTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DemoRequestUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  businessName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  cellPhone?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfLocations?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  websiteUrl?: Prisma.StringFieldUpdateOperationsInput | string
  demoTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DemoRequestCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  businessName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  cellPhone?: Prisma.SortOrder
  numberOfLocations?: Prisma.SortOrder
  zipCode?: Prisma.SortOrder
  websiteUrl?: Prisma.SortOrder
  demoTime?: Prisma.SortOrder
}

export type DemoRequestMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  businessName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  cellPhone?: Prisma.SortOrder
  numberOfLocations?: Prisma.SortOrder
  zipCode?: Prisma.SortOrder
  websiteUrl?: Prisma.SortOrder
  demoTime?: Prisma.SortOrder
}

export type DemoRequestMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  businessName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  cellPhone?: Prisma.SortOrder
  numberOfLocations?: Prisma.SortOrder
  zipCode?: Prisma.SortOrder
  websiteUrl?: Prisma.SortOrder
  demoTime?: Prisma.SortOrder
}



export type DemoRequestSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  businessName?: boolean
  email?: boolean
  cellPhone?: boolean
  numberOfLocations?: boolean
  zipCode?: boolean
  websiteUrl?: boolean
  demoTime?: boolean
}, ExtArgs["result"]["demoRequest"]>

export type DemoRequestSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  businessName?: boolean
  email?: boolean
  cellPhone?: boolean
  numberOfLocations?: boolean
  zipCode?: boolean
  websiteUrl?: boolean
  demoTime?: boolean
}, ExtArgs["result"]["demoRequest"]>

export type DemoRequestSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  businessName?: boolean
  email?: boolean
  cellPhone?: boolean
  numberOfLocations?: boolean
  zipCode?: boolean
  websiteUrl?: boolean
  demoTime?: boolean
}, ExtArgs["result"]["demoRequest"]>

export type DemoRequestSelectScalar = {
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  businessName?: boolean
  email?: boolean
  cellPhone?: boolean
  numberOfLocations?: boolean
  zipCode?: boolean
  websiteUrl?: boolean
  demoTime?: boolean
}

export type DemoRequestOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "firstName" | "lastName" | "businessName" | "email" | "cellPhone" | "numberOfLocations" | "zipCode" | "websiteUrl" | "demoTime", ExtArgs["result"]["demoRequest"]>

export type $DemoRequestPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DemoRequest"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    firstName: string
    lastName: string
    businessName: string
    email: string
    cellPhone: string
    numberOfLocations: string
    zipCode: string
    websiteUrl: string
    demoTime: Date
  }, ExtArgs["result"]["demoRequest"]>
  composites: {}
}

export type DemoRequestGetPayload<S extends boolean | null | undefined | DemoRequestDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload, S>

export type DemoRequestCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DemoRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DemoRequestCountAggregateInputType | true
  }

export interface DemoRequestDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DemoRequest'], meta: { name: 'DemoRequest' } }
  /**
   * Find zero or one DemoRequest that matches the filter.
   * @param {DemoRequestFindUniqueArgs} args - Arguments to find a DemoRequest
   * @example
   * // Get one DemoRequest
   * const demoRequest = await prisma.demoRequest.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DemoRequestFindUniqueArgs>(args: Prisma.SelectSubset<T, DemoRequestFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DemoRequestClient<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DemoRequest that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DemoRequestFindUniqueOrThrowArgs} args - Arguments to find a DemoRequest
   * @example
   * // Get one DemoRequest
   * const demoRequest = await prisma.demoRequest.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DemoRequestFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DemoRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DemoRequestClient<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DemoRequest that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DemoRequestFindFirstArgs} args - Arguments to find a DemoRequest
   * @example
   * // Get one DemoRequest
   * const demoRequest = await prisma.demoRequest.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DemoRequestFindFirstArgs>(args?: Prisma.SelectSubset<T, DemoRequestFindFirstArgs<ExtArgs>>): Prisma.Prisma__DemoRequestClient<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DemoRequest that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DemoRequestFindFirstOrThrowArgs} args - Arguments to find a DemoRequest
   * @example
   * // Get one DemoRequest
   * const demoRequest = await prisma.demoRequest.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DemoRequestFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DemoRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DemoRequestClient<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DemoRequests that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DemoRequestFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DemoRequests
   * const demoRequests = await prisma.demoRequest.findMany()
   * 
   * // Get first 10 DemoRequests
   * const demoRequests = await prisma.demoRequest.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const demoRequestWithIdOnly = await prisma.demoRequest.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DemoRequestFindManyArgs>(args?: Prisma.SelectSubset<T, DemoRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DemoRequest.
   * @param {DemoRequestCreateArgs} args - Arguments to create a DemoRequest.
   * @example
   * // Create one DemoRequest
   * const DemoRequest = await prisma.demoRequest.create({
   *   data: {
   *     // ... data to create a DemoRequest
   *   }
   * })
   * 
   */
  create<T extends DemoRequestCreateArgs>(args: Prisma.SelectSubset<T, DemoRequestCreateArgs<ExtArgs>>): Prisma.Prisma__DemoRequestClient<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DemoRequests.
   * @param {DemoRequestCreateManyArgs} args - Arguments to create many DemoRequests.
   * @example
   * // Create many DemoRequests
   * const demoRequest = await prisma.demoRequest.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DemoRequestCreateManyArgs>(args?: Prisma.SelectSubset<T, DemoRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DemoRequests and returns the data saved in the database.
   * @param {DemoRequestCreateManyAndReturnArgs} args - Arguments to create many DemoRequests.
   * @example
   * // Create many DemoRequests
   * const demoRequest = await prisma.demoRequest.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DemoRequests and only return the `id`
   * const demoRequestWithIdOnly = await prisma.demoRequest.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DemoRequestCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DemoRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DemoRequest.
   * @param {DemoRequestDeleteArgs} args - Arguments to delete one DemoRequest.
   * @example
   * // Delete one DemoRequest
   * const DemoRequest = await prisma.demoRequest.delete({
   *   where: {
   *     // ... filter to delete one DemoRequest
   *   }
   * })
   * 
   */
  delete<T extends DemoRequestDeleteArgs>(args: Prisma.SelectSubset<T, DemoRequestDeleteArgs<ExtArgs>>): Prisma.Prisma__DemoRequestClient<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DemoRequest.
   * @param {DemoRequestUpdateArgs} args - Arguments to update one DemoRequest.
   * @example
   * // Update one DemoRequest
   * const demoRequest = await prisma.demoRequest.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DemoRequestUpdateArgs>(args: Prisma.SelectSubset<T, DemoRequestUpdateArgs<ExtArgs>>): Prisma.Prisma__DemoRequestClient<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DemoRequests.
   * @param {DemoRequestDeleteManyArgs} args - Arguments to filter DemoRequests to delete.
   * @example
   * // Delete a few DemoRequests
   * const { count } = await prisma.demoRequest.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DemoRequestDeleteManyArgs>(args?: Prisma.SelectSubset<T, DemoRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DemoRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DemoRequestUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DemoRequests
   * const demoRequest = await prisma.demoRequest.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DemoRequestUpdateManyArgs>(args: Prisma.SelectSubset<T, DemoRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DemoRequests and returns the data updated in the database.
   * @param {DemoRequestUpdateManyAndReturnArgs} args - Arguments to update many DemoRequests.
   * @example
   * // Update many DemoRequests
   * const demoRequest = await prisma.demoRequest.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DemoRequests and only return the `id`
   * const demoRequestWithIdOnly = await prisma.demoRequest.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DemoRequestUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DemoRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DemoRequest.
   * @param {DemoRequestUpsertArgs} args - Arguments to update or create a DemoRequest.
   * @example
   * // Update or create a DemoRequest
   * const demoRequest = await prisma.demoRequest.upsert({
   *   create: {
   *     // ... data to create a DemoRequest
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DemoRequest we want to update
   *   }
   * })
   */
  upsert<T extends DemoRequestUpsertArgs>(args: Prisma.SelectSubset<T, DemoRequestUpsertArgs<ExtArgs>>): Prisma.Prisma__DemoRequestClient<runtime.Types.Result.GetResult<Prisma.$DemoRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DemoRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DemoRequestCountArgs} args - Arguments to filter DemoRequests to count.
   * @example
   * // Count the number of DemoRequests
   * const count = await prisma.demoRequest.count({
   *   where: {
   *     // ... the filter for the DemoRequests we want to count
   *   }
   * })
  **/
  count<T extends DemoRequestCountArgs>(
    args?: Prisma.Subset<T, DemoRequestCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DemoRequestCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DemoRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DemoRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DemoRequestAggregateArgs>(args: Prisma.Subset<T, DemoRequestAggregateArgs>): Prisma.PrismaPromise<GetDemoRequestAggregateType<T>>

  /**
   * Group by DemoRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DemoRequestGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DemoRequestGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DemoRequestGroupByArgs['orderBy'] }
      : { orderBy?: DemoRequestGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DemoRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDemoRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DemoRequest model
 */
readonly fields: DemoRequestFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DemoRequest.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DemoRequestClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DemoRequest model
 */
export interface DemoRequestFieldRefs {
  readonly id: Prisma.FieldRef<"DemoRequest", 'String'>
  readonly firstName: Prisma.FieldRef<"DemoRequest", 'String'>
  readonly lastName: Prisma.FieldRef<"DemoRequest", 'String'>
  readonly businessName: Prisma.FieldRef<"DemoRequest", 'String'>
  readonly email: Prisma.FieldRef<"DemoRequest", 'String'>
  readonly cellPhone: Prisma.FieldRef<"DemoRequest", 'String'>
  readonly numberOfLocations: Prisma.FieldRef<"DemoRequest", 'String'>
  readonly zipCode: Prisma.FieldRef<"DemoRequest", 'String'>
  readonly websiteUrl: Prisma.FieldRef<"DemoRequest", 'String'>
  readonly demoTime: Prisma.FieldRef<"DemoRequest", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DemoRequest findUnique
 */
export type DemoRequestFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * Filter, which DemoRequest to fetch.
   */
  where: Prisma.DemoRequestWhereUniqueInput
}

/**
 * DemoRequest findUniqueOrThrow
 */
export type DemoRequestFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * Filter, which DemoRequest to fetch.
   */
  where: Prisma.DemoRequestWhereUniqueInput
}

/**
 * DemoRequest findFirst
 */
export type DemoRequestFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * Filter, which DemoRequest to fetch.
   */
  where?: Prisma.DemoRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DemoRequests to fetch.
   */
  orderBy?: Prisma.DemoRequestOrderByWithRelationInput | Prisma.DemoRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DemoRequests.
   */
  cursor?: Prisma.DemoRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DemoRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DemoRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DemoRequests.
   */
  distinct?: Prisma.DemoRequestScalarFieldEnum | Prisma.DemoRequestScalarFieldEnum[]
}

/**
 * DemoRequest findFirstOrThrow
 */
export type DemoRequestFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * Filter, which DemoRequest to fetch.
   */
  where?: Prisma.DemoRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DemoRequests to fetch.
   */
  orderBy?: Prisma.DemoRequestOrderByWithRelationInput | Prisma.DemoRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DemoRequests.
   */
  cursor?: Prisma.DemoRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DemoRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DemoRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DemoRequests.
   */
  distinct?: Prisma.DemoRequestScalarFieldEnum | Prisma.DemoRequestScalarFieldEnum[]
}

/**
 * DemoRequest findMany
 */
export type DemoRequestFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * Filter, which DemoRequests to fetch.
   */
  where?: Prisma.DemoRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DemoRequests to fetch.
   */
  orderBy?: Prisma.DemoRequestOrderByWithRelationInput | Prisma.DemoRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DemoRequests.
   */
  cursor?: Prisma.DemoRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DemoRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DemoRequests.
   */
  skip?: number
  distinct?: Prisma.DemoRequestScalarFieldEnum | Prisma.DemoRequestScalarFieldEnum[]
}

/**
 * DemoRequest create
 */
export type DemoRequestCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * The data needed to create a DemoRequest.
   */
  data: Prisma.XOR<Prisma.DemoRequestCreateInput, Prisma.DemoRequestUncheckedCreateInput>
}

/**
 * DemoRequest createMany
 */
export type DemoRequestCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DemoRequests.
   */
  data: Prisma.DemoRequestCreateManyInput | Prisma.DemoRequestCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DemoRequest createManyAndReturn
 */
export type DemoRequestCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * The data used to create many DemoRequests.
   */
  data: Prisma.DemoRequestCreateManyInput | Prisma.DemoRequestCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DemoRequest update
 */
export type DemoRequestUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * The data needed to update a DemoRequest.
   */
  data: Prisma.XOR<Prisma.DemoRequestUpdateInput, Prisma.DemoRequestUncheckedUpdateInput>
  /**
   * Choose, which DemoRequest to update.
   */
  where: Prisma.DemoRequestWhereUniqueInput
}

/**
 * DemoRequest updateMany
 */
export type DemoRequestUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DemoRequests.
   */
  data: Prisma.XOR<Prisma.DemoRequestUpdateManyMutationInput, Prisma.DemoRequestUncheckedUpdateManyInput>
  /**
   * Filter which DemoRequests to update
   */
  where?: Prisma.DemoRequestWhereInput
  /**
   * Limit how many DemoRequests to update.
   */
  limit?: number
}

/**
 * DemoRequest updateManyAndReturn
 */
export type DemoRequestUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * The data used to update DemoRequests.
   */
  data: Prisma.XOR<Prisma.DemoRequestUpdateManyMutationInput, Prisma.DemoRequestUncheckedUpdateManyInput>
  /**
   * Filter which DemoRequests to update
   */
  where?: Prisma.DemoRequestWhereInput
  /**
   * Limit how many DemoRequests to update.
   */
  limit?: number
}

/**
 * DemoRequest upsert
 */
export type DemoRequestUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * The filter to search for the DemoRequest to update in case it exists.
   */
  where: Prisma.DemoRequestWhereUniqueInput
  /**
   * In case the DemoRequest found by the `where` argument doesn't exist, create a new DemoRequest with this data.
   */
  create: Prisma.XOR<Prisma.DemoRequestCreateInput, Prisma.DemoRequestUncheckedCreateInput>
  /**
   * In case the DemoRequest was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DemoRequestUpdateInput, Prisma.DemoRequestUncheckedUpdateInput>
}

/**
 * DemoRequest delete
 */
export type DemoRequestDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
  /**
   * Filter which DemoRequest to delete.
   */
  where: Prisma.DemoRequestWhereUniqueInput
}

/**
 * DemoRequest deleteMany
 */
export type DemoRequestDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DemoRequests to delete
   */
  where?: Prisma.DemoRequestWhereInput
  /**
   * Limit how many DemoRequests to delete.
   */
  limit?: number
}

/**
 * DemoRequest without action
 */
export type DemoRequestDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DemoRequest
   */
  select?: Prisma.DemoRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DemoRequest
   */
  omit?: Prisma.DemoRequestOmit<ExtArgs> | null
}
