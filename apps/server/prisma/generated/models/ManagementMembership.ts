
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ManagementMembership` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ManagementMembership
 * 
 */
export type ManagementMembershipModel = runtime.Types.Result.DefaultSelection<Prisma.$ManagementMembershipPayload>

export type AggregateManagementMembership = {
  _count: ManagementMembershipCountAggregateOutputType | null
  _min: ManagementMembershipMinAggregateOutputType | null
  _max: ManagementMembershipMaxAggregateOutputType | null
}

export type ManagementMembershipMinAggregateOutputType = {
  id: string | null
  userId: string | null
  role: $Enums.OrgRole | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ManagementMembershipMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  role: $Enums.OrgRole | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ManagementMembershipCountAggregateOutputType = {
  id: number
  userId: number
  role: number
  organizationId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ManagementMembershipMinAggregateInputType = {
  id?: true
  userId?: true
  role?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
}

export type ManagementMembershipMaxAggregateInputType = {
  id?: true
  userId?: true
  role?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
}

export type ManagementMembershipCountAggregateInputType = {
  id?: true
  userId?: true
  role?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ManagementMembershipAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ManagementMembership to aggregate.
   */
  where?: Prisma.ManagementMembershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ManagementMemberships to fetch.
   */
  orderBy?: Prisma.ManagementMembershipOrderByWithRelationInput | Prisma.ManagementMembershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ManagementMembershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ManagementMemberships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ManagementMemberships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ManagementMemberships
  **/
  _count?: true | ManagementMembershipCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ManagementMembershipMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ManagementMembershipMaxAggregateInputType
}

export type GetManagementMembershipAggregateType<T extends ManagementMembershipAggregateArgs> = {
      [P in keyof T & keyof AggregateManagementMembership]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateManagementMembership[P]>
    : Prisma.GetScalarType<T[P], AggregateManagementMembership[P]>
}




export type ManagementMembershipGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ManagementMembershipWhereInput
  orderBy?: Prisma.ManagementMembershipOrderByWithAggregationInput | Prisma.ManagementMembershipOrderByWithAggregationInput[]
  by: Prisma.ManagementMembershipScalarFieldEnum[] | Prisma.ManagementMembershipScalarFieldEnum
  having?: Prisma.ManagementMembershipScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ManagementMembershipCountAggregateInputType | true
  _min?: ManagementMembershipMinAggregateInputType
  _max?: ManagementMembershipMaxAggregateInputType
}

export type ManagementMembershipGroupByOutputType = {
  id: string
  userId: string
  role: $Enums.OrgRole
  organizationId: string
  createdAt: Date
  updatedAt: Date
  _count: ManagementMembershipCountAggregateOutputType | null
  _min: ManagementMembershipMinAggregateOutputType | null
  _max: ManagementMembershipMaxAggregateOutputType | null
}

type GetManagementMembershipGroupByPayload<T extends ManagementMembershipGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ManagementMembershipGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ManagementMembershipGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ManagementMembershipGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ManagementMembershipGroupByOutputType[P]>
      }
    >
  >



export type ManagementMembershipWhereInput = {
  AND?: Prisma.ManagementMembershipWhereInput | Prisma.ManagementMembershipWhereInput[]
  OR?: Prisma.ManagementMembershipWhereInput[]
  NOT?: Prisma.ManagementMembershipWhereInput | Prisma.ManagementMembershipWhereInput[]
  id?: Prisma.StringFilter<"ManagementMembership"> | string
  userId?: Prisma.StringFilter<"ManagementMembership"> | string
  role?: Prisma.EnumOrgRoleFilter<"ManagementMembership"> | $Enums.OrgRole
  organizationId?: Prisma.StringFilter<"ManagementMembership"> | string
  createdAt?: Prisma.DateTimeFilter<"ManagementMembership"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ManagementMembership"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ManagementMembershipOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type ManagementMembershipWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ManagementMembershipWhereInput | Prisma.ManagementMembershipWhereInput[]
  OR?: Prisma.ManagementMembershipWhereInput[]
  NOT?: Prisma.ManagementMembershipWhereInput | Prisma.ManagementMembershipWhereInput[]
  userId?: Prisma.StringFilter<"ManagementMembership"> | string
  role?: Prisma.EnumOrgRoleFilter<"ManagementMembership"> | $Enums.OrgRole
  organizationId?: Prisma.StringFilter<"ManagementMembership"> | string
  createdAt?: Prisma.DateTimeFilter<"ManagementMembership"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ManagementMembership"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ManagementMembershipOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ManagementMembershipCountOrderByAggregateInput
  _max?: Prisma.ManagementMembershipMaxOrderByAggregateInput
  _min?: Prisma.ManagementMembershipMinOrderByAggregateInput
}

export type ManagementMembershipScalarWhereWithAggregatesInput = {
  AND?: Prisma.ManagementMembershipScalarWhereWithAggregatesInput | Prisma.ManagementMembershipScalarWhereWithAggregatesInput[]
  OR?: Prisma.ManagementMembershipScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ManagementMembershipScalarWhereWithAggregatesInput | Prisma.ManagementMembershipScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ManagementMembership"> | string
  userId?: Prisma.StringWithAggregatesFilter<"ManagementMembership"> | string
  role?: Prisma.EnumOrgRoleWithAggregatesFilter<"ManagementMembership"> | $Enums.OrgRole
  organizationId?: Prisma.StringWithAggregatesFilter<"ManagementMembership"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ManagementMembership"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ManagementMembership"> | Date | string
}

export type ManagementMembershipCreateInput = {
  id?: string
  role?: $Enums.OrgRole
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutManagementInput
  user: Prisma.UserCreateNestedOneWithoutManagementInput
}

export type ManagementMembershipUncheckedCreateInput = {
  id?: string
  userId: string
  role?: $Enums.OrgRole
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagementMembershipUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutManagementNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutManagementNestedInput
}

export type ManagementMembershipUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagementMembershipCreateManyInput = {
  id?: string
  userId: string
  role?: $Enums.OrgRole
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagementMembershipUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagementMembershipUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagementMembershipListRelationFilter = {
  every?: Prisma.ManagementMembershipWhereInput
  some?: Prisma.ManagementMembershipWhereInput
  none?: Prisma.ManagementMembershipWhereInput
}

export type ManagementMembershipOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ManagementMembershipCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ManagementMembershipMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ManagementMembershipMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ManagementMembershipCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutUserInput, Prisma.ManagementMembershipUncheckedCreateWithoutUserInput> | Prisma.ManagementMembershipCreateWithoutUserInput[] | Prisma.ManagementMembershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ManagementMembershipCreateOrConnectWithoutUserInput | Prisma.ManagementMembershipCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ManagementMembershipCreateManyUserInputEnvelope
  connect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
}

export type ManagementMembershipUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutUserInput, Prisma.ManagementMembershipUncheckedCreateWithoutUserInput> | Prisma.ManagementMembershipCreateWithoutUserInput[] | Prisma.ManagementMembershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ManagementMembershipCreateOrConnectWithoutUserInput | Prisma.ManagementMembershipCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ManagementMembershipCreateManyUserInputEnvelope
  connect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
}

export type ManagementMembershipUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutUserInput, Prisma.ManagementMembershipUncheckedCreateWithoutUserInput> | Prisma.ManagementMembershipCreateWithoutUserInput[] | Prisma.ManagementMembershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ManagementMembershipCreateOrConnectWithoutUserInput | Prisma.ManagementMembershipCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ManagementMembershipUpsertWithWhereUniqueWithoutUserInput | Prisma.ManagementMembershipUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ManagementMembershipCreateManyUserInputEnvelope
  set?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  disconnect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  delete?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  connect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  update?: Prisma.ManagementMembershipUpdateWithWhereUniqueWithoutUserInput | Prisma.ManagementMembershipUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ManagementMembershipUpdateManyWithWhereWithoutUserInput | Prisma.ManagementMembershipUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ManagementMembershipScalarWhereInput | Prisma.ManagementMembershipScalarWhereInput[]
}

export type ManagementMembershipUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutUserInput, Prisma.ManagementMembershipUncheckedCreateWithoutUserInput> | Prisma.ManagementMembershipCreateWithoutUserInput[] | Prisma.ManagementMembershipUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ManagementMembershipCreateOrConnectWithoutUserInput | Prisma.ManagementMembershipCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ManagementMembershipUpsertWithWhereUniqueWithoutUserInput | Prisma.ManagementMembershipUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ManagementMembershipCreateManyUserInputEnvelope
  set?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  disconnect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  delete?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  connect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  update?: Prisma.ManagementMembershipUpdateWithWhereUniqueWithoutUserInput | Prisma.ManagementMembershipUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ManagementMembershipUpdateManyWithWhereWithoutUserInput | Prisma.ManagementMembershipUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ManagementMembershipScalarWhereInput | Prisma.ManagementMembershipScalarWhereInput[]
}

export type ManagementMembershipCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutOrganizationInput, Prisma.ManagementMembershipUncheckedCreateWithoutOrganizationInput> | Prisma.ManagementMembershipCreateWithoutOrganizationInput[] | Prisma.ManagementMembershipUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ManagementMembershipCreateOrConnectWithoutOrganizationInput | Prisma.ManagementMembershipCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ManagementMembershipCreateManyOrganizationInputEnvelope
  connect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
}

export type ManagementMembershipUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutOrganizationInput, Prisma.ManagementMembershipUncheckedCreateWithoutOrganizationInput> | Prisma.ManagementMembershipCreateWithoutOrganizationInput[] | Prisma.ManagementMembershipUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ManagementMembershipCreateOrConnectWithoutOrganizationInput | Prisma.ManagementMembershipCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ManagementMembershipCreateManyOrganizationInputEnvelope
  connect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
}

export type ManagementMembershipUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutOrganizationInput, Prisma.ManagementMembershipUncheckedCreateWithoutOrganizationInput> | Prisma.ManagementMembershipCreateWithoutOrganizationInput[] | Prisma.ManagementMembershipUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ManagementMembershipCreateOrConnectWithoutOrganizationInput | Prisma.ManagementMembershipCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.ManagementMembershipUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.ManagementMembershipUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ManagementMembershipCreateManyOrganizationInputEnvelope
  set?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  disconnect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  delete?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  connect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  update?: Prisma.ManagementMembershipUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.ManagementMembershipUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.ManagementMembershipUpdateManyWithWhereWithoutOrganizationInput | Prisma.ManagementMembershipUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.ManagementMembershipScalarWhereInput | Prisma.ManagementMembershipScalarWhereInput[]
}

export type ManagementMembershipUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutOrganizationInput, Prisma.ManagementMembershipUncheckedCreateWithoutOrganizationInput> | Prisma.ManagementMembershipCreateWithoutOrganizationInput[] | Prisma.ManagementMembershipUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ManagementMembershipCreateOrConnectWithoutOrganizationInput | Prisma.ManagementMembershipCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.ManagementMembershipUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.ManagementMembershipUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ManagementMembershipCreateManyOrganizationInputEnvelope
  set?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  disconnect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  delete?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  connect?: Prisma.ManagementMembershipWhereUniqueInput | Prisma.ManagementMembershipWhereUniqueInput[]
  update?: Prisma.ManagementMembershipUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.ManagementMembershipUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.ManagementMembershipUpdateManyWithWhereWithoutOrganizationInput | Prisma.ManagementMembershipUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.ManagementMembershipScalarWhereInput | Prisma.ManagementMembershipScalarWhereInput[]
}

export type EnumOrgRoleFieldUpdateOperationsInput = {
  set?: $Enums.OrgRole
}

export type ManagementMembershipCreateWithoutUserInput = {
  id?: string
  role?: $Enums.OrgRole
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutManagementInput
}

export type ManagementMembershipUncheckedCreateWithoutUserInput = {
  id?: string
  role?: $Enums.OrgRole
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagementMembershipCreateOrConnectWithoutUserInput = {
  where: Prisma.ManagementMembershipWhereUniqueInput
  create: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutUserInput, Prisma.ManagementMembershipUncheckedCreateWithoutUserInput>
}

export type ManagementMembershipCreateManyUserInputEnvelope = {
  data: Prisma.ManagementMembershipCreateManyUserInput | Prisma.ManagementMembershipCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ManagementMembershipUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ManagementMembershipWhereUniqueInput
  update: Prisma.XOR<Prisma.ManagementMembershipUpdateWithoutUserInput, Prisma.ManagementMembershipUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutUserInput, Prisma.ManagementMembershipUncheckedCreateWithoutUserInput>
}

export type ManagementMembershipUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ManagementMembershipWhereUniqueInput
  data: Prisma.XOR<Prisma.ManagementMembershipUpdateWithoutUserInput, Prisma.ManagementMembershipUncheckedUpdateWithoutUserInput>
}

export type ManagementMembershipUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ManagementMembershipScalarWhereInput
  data: Prisma.XOR<Prisma.ManagementMembershipUpdateManyMutationInput, Prisma.ManagementMembershipUncheckedUpdateManyWithoutUserInput>
}

export type ManagementMembershipScalarWhereInput = {
  AND?: Prisma.ManagementMembershipScalarWhereInput | Prisma.ManagementMembershipScalarWhereInput[]
  OR?: Prisma.ManagementMembershipScalarWhereInput[]
  NOT?: Prisma.ManagementMembershipScalarWhereInput | Prisma.ManagementMembershipScalarWhereInput[]
  id?: Prisma.StringFilter<"ManagementMembership"> | string
  userId?: Prisma.StringFilter<"ManagementMembership"> | string
  role?: Prisma.EnumOrgRoleFilter<"ManagementMembership"> | $Enums.OrgRole
  organizationId?: Prisma.StringFilter<"ManagementMembership"> | string
  createdAt?: Prisma.DateTimeFilter<"ManagementMembership"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ManagementMembership"> | Date | string
}

export type ManagementMembershipCreateWithoutOrganizationInput = {
  id?: string
  role?: $Enums.OrgRole
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutManagementInput
}

export type ManagementMembershipUncheckedCreateWithoutOrganizationInput = {
  id?: string
  userId: string
  role?: $Enums.OrgRole
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagementMembershipCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.ManagementMembershipWhereUniqueInput
  create: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutOrganizationInput, Prisma.ManagementMembershipUncheckedCreateWithoutOrganizationInput>
}

export type ManagementMembershipCreateManyOrganizationInputEnvelope = {
  data: Prisma.ManagementMembershipCreateManyOrganizationInput | Prisma.ManagementMembershipCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type ManagementMembershipUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ManagementMembershipWhereUniqueInput
  update: Prisma.XOR<Prisma.ManagementMembershipUpdateWithoutOrganizationInput, Prisma.ManagementMembershipUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.ManagementMembershipCreateWithoutOrganizationInput, Prisma.ManagementMembershipUncheckedCreateWithoutOrganizationInput>
}

export type ManagementMembershipUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ManagementMembershipWhereUniqueInput
  data: Prisma.XOR<Prisma.ManagementMembershipUpdateWithoutOrganizationInput, Prisma.ManagementMembershipUncheckedUpdateWithoutOrganizationInput>
}

export type ManagementMembershipUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.ManagementMembershipScalarWhereInput
  data: Prisma.XOR<Prisma.ManagementMembershipUpdateManyMutationInput, Prisma.ManagementMembershipUncheckedUpdateManyWithoutOrganizationInput>
}

export type ManagementMembershipCreateManyUserInput = {
  id?: string
  role?: $Enums.OrgRole
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagementMembershipUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutManagementNestedInput
}

export type ManagementMembershipUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagementMembershipUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagementMembershipCreateManyOrganizationInput = {
  id?: string
  userId: string
  role?: $Enums.OrgRole
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ManagementMembershipUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutManagementNestedInput
}

export type ManagementMembershipUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagementMembershipUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumOrgRoleFieldUpdateOperationsInput | $Enums.OrgRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ManagementMembershipSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  role?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["managementMembership"]>

export type ManagementMembershipSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  role?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["managementMembership"]>

export type ManagementMembershipSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  role?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["managementMembership"]>

export type ManagementMembershipSelectScalar = {
  id?: boolean
  userId?: boolean
  role?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ManagementMembershipOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "role" | "organizationId" | "createdAt" | "updatedAt", ExtArgs["result"]["managementMembership"]>
export type ManagementMembershipInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ManagementMembershipIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ManagementMembershipIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ManagementMembershipPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ManagementMembership"
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    role: $Enums.OrgRole
    organizationId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["managementMembership"]>
  composites: {}
}

export type ManagementMembershipGetPayload<S extends boolean | null | undefined | ManagementMembershipDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload, S>

export type ManagementMembershipCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ManagementMembershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ManagementMembershipCountAggregateInputType | true
  }

export interface ManagementMembershipDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ManagementMembership'], meta: { name: 'ManagementMembership' } }
  /**
   * Find zero or one ManagementMembership that matches the filter.
   * @param {ManagementMembershipFindUniqueArgs} args - Arguments to find a ManagementMembership
   * @example
   * // Get one ManagementMembership
   * const managementMembership = await prisma.managementMembership.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ManagementMembershipFindUniqueArgs>(args: Prisma.SelectSubset<T, ManagementMembershipFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ManagementMembershipClient<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ManagementMembership that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ManagementMembershipFindUniqueOrThrowArgs} args - Arguments to find a ManagementMembership
   * @example
   * // Get one ManagementMembership
   * const managementMembership = await prisma.managementMembership.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ManagementMembershipFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ManagementMembershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ManagementMembershipClient<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ManagementMembership that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementMembershipFindFirstArgs} args - Arguments to find a ManagementMembership
   * @example
   * // Get one ManagementMembership
   * const managementMembership = await prisma.managementMembership.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ManagementMembershipFindFirstArgs>(args?: Prisma.SelectSubset<T, ManagementMembershipFindFirstArgs<ExtArgs>>): Prisma.Prisma__ManagementMembershipClient<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ManagementMembership that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementMembershipFindFirstOrThrowArgs} args - Arguments to find a ManagementMembership
   * @example
   * // Get one ManagementMembership
   * const managementMembership = await prisma.managementMembership.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ManagementMembershipFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ManagementMembershipFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ManagementMembershipClient<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ManagementMemberships that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementMembershipFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ManagementMemberships
   * const managementMemberships = await prisma.managementMembership.findMany()
   * 
   * // Get first 10 ManagementMemberships
   * const managementMemberships = await prisma.managementMembership.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const managementMembershipWithIdOnly = await prisma.managementMembership.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ManagementMembershipFindManyArgs>(args?: Prisma.SelectSubset<T, ManagementMembershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ManagementMembership.
   * @param {ManagementMembershipCreateArgs} args - Arguments to create a ManagementMembership.
   * @example
   * // Create one ManagementMembership
   * const ManagementMembership = await prisma.managementMembership.create({
   *   data: {
   *     // ... data to create a ManagementMembership
   *   }
   * })
   * 
   */
  create<T extends ManagementMembershipCreateArgs>(args: Prisma.SelectSubset<T, ManagementMembershipCreateArgs<ExtArgs>>): Prisma.Prisma__ManagementMembershipClient<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ManagementMemberships.
   * @param {ManagementMembershipCreateManyArgs} args - Arguments to create many ManagementMemberships.
   * @example
   * // Create many ManagementMemberships
   * const managementMembership = await prisma.managementMembership.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ManagementMembershipCreateManyArgs>(args?: Prisma.SelectSubset<T, ManagementMembershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ManagementMemberships and returns the data saved in the database.
   * @param {ManagementMembershipCreateManyAndReturnArgs} args - Arguments to create many ManagementMemberships.
   * @example
   * // Create many ManagementMemberships
   * const managementMembership = await prisma.managementMembership.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ManagementMemberships and only return the `id`
   * const managementMembershipWithIdOnly = await prisma.managementMembership.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ManagementMembershipCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ManagementMembershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ManagementMembership.
   * @param {ManagementMembershipDeleteArgs} args - Arguments to delete one ManagementMembership.
   * @example
   * // Delete one ManagementMembership
   * const ManagementMembership = await prisma.managementMembership.delete({
   *   where: {
   *     // ... filter to delete one ManagementMembership
   *   }
   * })
   * 
   */
  delete<T extends ManagementMembershipDeleteArgs>(args: Prisma.SelectSubset<T, ManagementMembershipDeleteArgs<ExtArgs>>): Prisma.Prisma__ManagementMembershipClient<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ManagementMembership.
   * @param {ManagementMembershipUpdateArgs} args - Arguments to update one ManagementMembership.
   * @example
   * // Update one ManagementMembership
   * const managementMembership = await prisma.managementMembership.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ManagementMembershipUpdateArgs>(args: Prisma.SelectSubset<T, ManagementMembershipUpdateArgs<ExtArgs>>): Prisma.Prisma__ManagementMembershipClient<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ManagementMemberships.
   * @param {ManagementMembershipDeleteManyArgs} args - Arguments to filter ManagementMemberships to delete.
   * @example
   * // Delete a few ManagementMemberships
   * const { count } = await prisma.managementMembership.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ManagementMembershipDeleteManyArgs>(args?: Prisma.SelectSubset<T, ManagementMembershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ManagementMemberships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementMembershipUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ManagementMemberships
   * const managementMembership = await prisma.managementMembership.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ManagementMembershipUpdateManyArgs>(args: Prisma.SelectSubset<T, ManagementMembershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ManagementMemberships and returns the data updated in the database.
   * @param {ManagementMembershipUpdateManyAndReturnArgs} args - Arguments to update many ManagementMemberships.
   * @example
   * // Update many ManagementMemberships
   * const managementMembership = await prisma.managementMembership.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ManagementMemberships and only return the `id`
   * const managementMembershipWithIdOnly = await prisma.managementMembership.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ManagementMembershipUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ManagementMembershipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ManagementMembership.
   * @param {ManagementMembershipUpsertArgs} args - Arguments to update or create a ManagementMembership.
   * @example
   * // Update or create a ManagementMembership
   * const managementMembership = await prisma.managementMembership.upsert({
   *   create: {
   *     // ... data to create a ManagementMembership
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ManagementMembership we want to update
   *   }
   * })
   */
  upsert<T extends ManagementMembershipUpsertArgs>(args: Prisma.SelectSubset<T, ManagementMembershipUpsertArgs<ExtArgs>>): Prisma.Prisma__ManagementMembershipClient<runtime.Types.Result.GetResult<Prisma.$ManagementMembershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ManagementMemberships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementMembershipCountArgs} args - Arguments to filter ManagementMemberships to count.
   * @example
   * // Count the number of ManagementMemberships
   * const count = await prisma.managementMembership.count({
   *   where: {
   *     // ... the filter for the ManagementMemberships we want to count
   *   }
   * })
  **/
  count<T extends ManagementMembershipCountArgs>(
    args?: Prisma.Subset<T, ManagementMembershipCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ManagementMembershipCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ManagementMembership.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ManagementMembershipAggregateArgs>(args: Prisma.Subset<T, ManagementMembershipAggregateArgs>): Prisma.PrismaPromise<GetManagementMembershipAggregateType<T>>

  /**
   * Group by ManagementMembership.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementMembershipGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ManagementMembershipGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ManagementMembershipGroupByArgs['orderBy'] }
      : { orderBy?: ManagementMembershipGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ManagementMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManagementMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ManagementMembership model
 */
readonly fields: ManagementMembershipFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ManagementMembership.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ManagementMembershipClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ManagementMembership model
 */
export interface ManagementMembershipFieldRefs {
  readonly id: Prisma.FieldRef<"ManagementMembership", 'String'>
  readonly userId: Prisma.FieldRef<"ManagementMembership", 'String'>
  readonly role: Prisma.FieldRef<"ManagementMembership", 'OrgRole'>
  readonly organizationId: Prisma.FieldRef<"ManagementMembership", 'String'>
  readonly createdAt: Prisma.FieldRef<"ManagementMembership", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ManagementMembership", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ManagementMembership findUnique
 */
export type ManagementMembershipFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
  /**
   * Filter, which ManagementMembership to fetch.
   */
  where: Prisma.ManagementMembershipWhereUniqueInput
}

/**
 * ManagementMembership findUniqueOrThrow
 */
export type ManagementMembershipFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
  /**
   * Filter, which ManagementMembership to fetch.
   */
  where: Prisma.ManagementMembershipWhereUniqueInput
}

/**
 * ManagementMembership findFirst
 */
export type ManagementMembershipFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
  /**
   * Filter, which ManagementMembership to fetch.
   */
  where?: Prisma.ManagementMembershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ManagementMemberships to fetch.
   */
  orderBy?: Prisma.ManagementMembershipOrderByWithRelationInput | Prisma.ManagementMembershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ManagementMemberships.
   */
  cursor?: Prisma.ManagementMembershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ManagementMemberships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ManagementMemberships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ManagementMemberships.
   */
  distinct?: Prisma.ManagementMembershipScalarFieldEnum | Prisma.ManagementMembershipScalarFieldEnum[]
}

/**
 * ManagementMembership findFirstOrThrow
 */
export type ManagementMembershipFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
  /**
   * Filter, which ManagementMembership to fetch.
   */
  where?: Prisma.ManagementMembershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ManagementMemberships to fetch.
   */
  orderBy?: Prisma.ManagementMembershipOrderByWithRelationInput | Prisma.ManagementMembershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ManagementMemberships.
   */
  cursor?: Prisma.ManagementMembershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ManagementMemberships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ManagementMemberships.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ManagementMemberships.
   */
  distinct?: Prisma.ManagementMembershipScalarFieldEnum | Prisma.ManagementMembershipScalarFieldEnum[]
}

/**
 * ManagementMembership findMany
 */
export type ManagementMembershipFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
  /**
   * Filter, which ManagementMemberships to fetch.
   */
  where?: Prisma.ManagementMembershipWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ManagementMemberships to fetch.
   */
  orderBy?: Prisma.ManagementMembershipOrderByWithRelationInput | Prisma.ManagementMembershipOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ManagementMemberships.
   */
  cursor?: Prisma.ManagementMembershipWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ManagementMemberships from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ManagementMemberships.
   */
  skip?: number
  distinct?: Prisma.ManagementMembershipScalarFieldEnum | Prisma.ManagementMembershipScalarFieldEnum[]
}

/**
 * ManagementMembership create
 */
export type ManagementMembershipCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
  /**
   * The data needed to create a ManagementMembership.
   */
  data: Prisma.XOR<Prisma.ManagementMembershipCreateInput, Prisma.ManagementMembershipUncheckedCreateInput>
}

/**
 * ManagementMembership createMany
 */
export type ManagementMembershipCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ManagementMemberships.
   */
  data: Prisma.ManagementMembershipCreateManyInput | Prisma.ManagementMembershipCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ManagementMembership createManyAndReturn
 */
export type ManagementMembershipCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * The data used to create many ManagementMemberships.
   */
  data: Prisma.ManagementMembershipCreateManyInput | Prisma.ManagementMembershipCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ManagementMembership update
 */
export type ManagementMembershipUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
  /**
   * The data needed to update a ManagementMembership.
   */
  data: Prisma.XOR<Prisma.ManagementMembershipUpdateInput, Prisma.ManagementMembershipUncheckedUpdateInput>
  /**
   * Choose, which ManagementMembership to update.
   */
  where: Prisma.ManagementMembershipWhereUniqueInput
}

/**
 * ManagementMembership updateMany
 */
export type ManagementMembershipUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ManagementMemberships.
   */
  data: Prisma.XOR<Prisma.ManagementMembershipUpdateManyMutationInput, Prisma.ManagementMembershipUncheckedUpdateManyInput>
  /**
   * Filter which ManagementMemberships to update
   */
  where?: Prisma.ManagementMembershipWhereInput
  /**
   * Limit how many ManagementMemberships to update.
   */
  limit?: number
}

/**
 * ManagementMembership updateManyAndReturn
 */
export type ManagementMembershipUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * The data used to update ManagementMemberships.
   */
  data: Prisma.XOR<Prisma.ManagementMembershipUpdateManyMutationInput, Prisma.ManagementMembershipUncheckedUpdateManyInput>
  /**
   * Filter which ManagementMemberships to update
   */
  where?: Prisma.ManagementMembershipWhereInput
  /**
   * Limit how many ManagementMemberships to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ManagementMembership upsert
 */
export type ManagementMembershipUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
  /**
   * The filter to search for the ManagementMembership to update in case it exists.
   */
  where: Prisma.ManagementMembershipWhereUniqueInput
  /**
   * In case the ManagementMembership found by the `where` argument doesn't exist, create a new ManagementMembership with this data.
   */
  create: Prisma.XOR<Prisma.ManagementMembershipCreateInput, Prisma.ManagementMembershipUncheckedCreateInput>
  /**
   * In case the ManagementMembership was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ManagementMembershipUpdateInput, Prisma.ManagementMembershipUncheckedUpdateInput>
}

/**
 * ManagementMembership delete
 */
export type ManagementMembershipDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
  /**
   * Filter which ManagementMembership to delete.
   */
  where: Prisma.ManagementMembershipWhereUniqueInput
}

/**
 * ManagementMembership deleteMany
 */
export type ManagementMembershipDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ManagementMemberships to delete
   */
  where?: Prisma.ManagementMembershipWhereInput
  /**
   * Limit how many ManagementMemberships to delete.
   */
  limit?: number
}

/**
 * ManagementMembership without action
 */
export type ManagementMembershipDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ManagementMembership
   */
  select?: Prisma.ManagementMembershipSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ManagementMembership
   */
  omit?: Prisma.ManagementMembershipOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagementMembershipInclude<ExtArgs> | null
}
